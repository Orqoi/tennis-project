TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);
WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;
Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

De_Ply1Serve = pcase {                             
			p0: ServeT_in{ball=5} -> Ply2_BackHandR  
			p1: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p2: ServeWide_in{ball=6} -> Ply2_ForeHandR 
			p3: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p4: Serve_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			p5: ServeT_in{ball=5} -> Ply2_BackHandR  
			p6: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p7: ServeWide_in{ball=6} -> Ply2_ForeHandR 
			p8: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p9: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply1Serve = pcase {
			p10: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p11: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p12: ServeWide_in{ball=4} -> Ply2_BackHandR
			p13: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p14: Serve_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			p15: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p16: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p17: ServeWide_in{ball=4} -> Ply2_BackHandR
			p18: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p19: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };    
     		 
Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			p20: FH_CrossCourt{ball=6} -> Ply2_de_regular_deep_handler
			p21: FH_DownLine{ball=4} -> Ply2_ad_regular_deep_handler
			p22: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p23: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p24: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p25: FH_InsideOut{ball =4} -> Ply2_ad_regular_deep_handler
			p26: FH_InsideIn{ball=6} -> Ply2_de_regular_deep_handler
			p27: FH_CrossCourt{ball=6} -> Ply2_de_regular_deep_handler
			p28: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p29: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p30: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			p31: BH_CrossCourt{ball=4} -> Ply2_ad_regular_deep_handler
			p32: BH_InsideIn{ball=4} -> Ply2_ad_regular_deep_handler
			p33: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p34: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p35: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p36: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p37: BH_CrossCourt{ball=4} -> Ply2_ad_regular_deep_handler
			p38: BH_DownLine{ball=6} -> Ply2_de_regular_deep_handler
			p39: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p40: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p41: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

// handlers
Ply1_de_regular_shallow_handler = pcase{
			p42: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p43: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
};

Ply1_mid_regular_shallow_handler = pcase{
			p44: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p45: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
};

Ply1_ad_regular_shallow_handler = pcase{
			p46: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p47: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
};

// deep handlers
Ply1_de_regular_deep_handler = pcase{
			p48: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p49: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
};

Ply1_mid_regular_deep_handler = pcase{
			p50: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p51: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
};

Ply1_ad_regular_deep_handler = pcase{
			p52: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p53: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
};

// shallow actions

// deuce stroke is when player1 hit position is 1
Ply1_de_regular_shallow = pcase{
			p54: FH_Crosscourt{ball=6} -> Ply2_de_regular_shallow_handler
			p55: FH_Downline{ball=4} -> Ply2_ad_regular_shallow_handler
			p56: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p57: BH_InsideIn{ball=4} -> Ply2_ad_regular_shallow_handler
			p58: BH_InsideOut{ball=6} -> Ply2_de_regular_shallow_handler
			p59: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p60: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
																else { turn = (turn+1)%4} }-> NextPt
			p61: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
																else { turn = (turn+1)%4} }-> NextPt  
};

// mid stroke is when player1 hit position is 2
Ply1_mid_regular_shallow = pcase{
			p62: FH_InsideOut{ball=4} -> Ply2_ad_regular_shallow_handler
			p63: FH_Crosscourt{ball=6} -> Ply2_de_regular_shallow_handler
			p64: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p65: BH_InsideOut{ball=6} -> Ply2_de_regular_shallow_handler
			p66: BH_Crosscourt{ball=4} -> Ply2_ad_regular_shallow_handler
			p67: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p68: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
																else { turn = (turn+1)%4} }-> NextPt
			p69: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
																else { turn = (turn+1)%4} }-> NextPt    
};

// ad stroke is when player1 hit position is 3
Ply1_ad_regular_shallow = pcase{
			p70: FH_InsideOut{ball=4} -> Ply2_ad_regular_shallow_handler
			p71: FH_InsideIn{ball=6} -> Ply2_de_regular_shallow_handler
			p72: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p73: BH_Crosscourt{ball=4} -> Ply2_ad_regular_shallow_handler
			p74: BH_Downline{ball=6} -> Ply2_de_regular_shallow_handler
			p75: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p76: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
																else { turn = (turn+1)%4} }-> NextPt
			p77: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
																else { turn = (turn+1)%4} }-> NextPt  
};

// deep actions

// deuce stroke is when player1 hit position is 1
Ply1_de_regular_deep = pcase{
			p78: FH_Crosscourt{ball=7} -> Ply2_de_regular_deep_handler
			p79: FH_Downline{ball=5} -> Ply2_ad_regular_deep_handler
			p80: FH_DownMid{ball=6} -> Ply2_mid_regular_deep_handler
			p81: BH_InsideIn{ball=5} -> Ply2_ad_regular_deep_handler
			p82: BH_InsideOut{ball=7} -> Ply2_de_regular_deep_handler
			p83: BH_DownMid{ball=6} -> Ply2_mid_regular_deep_handler
			p84: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
																else { turn = (turn+1)%4} }-> NextPt
			p85: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
																else { turn = (turn+1)%4} }-> NextPt  
};

// mid stroke is when player1 hit position is 2
Ply1_mid_regular_deep = pcase{
			p86: FH_InsideOut{ball=5} -> Ply2_ad_regular_deep_handler
			p87: FH_Crosscourt{ball=7} -> Ply2_de_regular_deep_handler
			p88: FH_DownMid{ball=6} -> Ply2_mid_regular_deep_handler
			p89: BH_InsideOut{ball=7} -> Ply2_de_regular_deep_handler
			p90: BH_Crosscourt{ball=5} -> Ply2_ad_regular_deep_handler
			p91: BH_DownMid{ball=6} -> Ply2_mid_regular_deep_handler
			p92: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
																else { turn = (turn+1)%4} }-> NextPt
			p93: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
																else { turn = (turn+1)%4} }-> NextPt    
};

// ad stroke is when player1 hit position is 3
Ply1_ad_regular_deep = pcase{
			p94: FH_InsideOut{ball=5} -> Ply2_ad_regular_deep_handler
			p95: FH_InsideIn{ball=7} -> Ply2_de_regular_deep_handler
			p96: FH_DownMid{ball=6} -> Ply2_mid_regular_deep_handler
			p97: BH_Crosscourt{ball=5} -> Ply2_ad_regular_deep_handler
			p98: BH_Downline{ball=7} -> Ply2_de_regular_deep_handler
			p99: BH_DownMid{ball=6} -> Ply2_mid_regular_deep_handler
			p100: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
																else { turn = (turn+1)%4} }-> NextPt
			p101: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
																else { turn = (turn+1)%4} }-> NextPt  
};


// deep actions
// mid stroke is when player1 hit position is 2

Ply1_de_regular_deep = pcase{
			p102: FH_Crosscourt{ball=6} -> Ply2_de_regular_deep_handler
			p103: FH_Downline{ball=4} -> Ply2_ad_regular_deep_handler
			p104: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p105: BH_InsideIn{ball=4} -> Ply2_ad_regular_deep_handler
			p106: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p107: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p108: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
											else { turn = (turn+1)%4} }-> NextPt
			p109: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
											else { turn = (turn+1)%4} }-> NextPt  
};

Ply1_mid_regular_deep = pcase{
			p110: FH_InsideOut{ball=4} -> Ply2_ad_regular_deep_handler
			p111: FH_Crosscourt{ball=6} -> Ply2_de_regular_deep_handler
			p112: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p113: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p114: BH_Crosscourt{ball=4} -> Ply2_ad_regular_deep_handler
			p115: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p116: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
											else { turn = (turn+1)%4} }-> NextPt
			p117: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
											else { turn = (turn+1)%4} }-> NextPt    
};

Ply1_ad_regular_deep = pcase{
			p118: FH_InsideOut{ball=4} -> Ply2_ad_regular_deep_handler
			p119: FH_InsideIn{ball=6} -> Ply2_de_regular_deep_handler
			p120: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p121: BH_Crosscourt{ball=4} -> Ply2_ad_regular_deep_handler
			p122: BH_Downline{ball=6} -> Ply2_de_regular_deep_handler
			p123: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p124: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
											else { turn = (turn+1)%4} }-> NextPt
			p125: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
											else { turn = (turn+1)%4} }-> NextPt  
};

De_Ply2Serve = pcase {
			p126: ServeT_in{ball=2} -> Ply1_BackHandR
			p127: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p128: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p129: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p130: Serve_err{ball=9} -> De_Ply2Serve_2nd};

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			p131: ServeT_in{ball=2} -> Ply1_BackHandR
			p132: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p133: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p134: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p135: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply2Serve = pcase {
			p136: ServeT_in{ball=2} -> Ply1_ForeHandR
			p137: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p138: ServeWide_in{ball=3} -> Ply1_BackHandR
			p139: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p140: Serve_err{ball=9} -> Ad_Ply2Serve_2nd};

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			p141: ServeT_in{ball=2} -> Ply1_ForeHandR
			p142: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p143: ServeWide_in{ball=3} -> Ply1_BackHandR
			p144: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p145: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };

Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			p146: FH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p147: FH_DownLine { ball = 3} -> Ply1_ad_regular_deep_handler
			p148: FH_DownMid{ ball = 2} -> Ply1_mid_regular_deep_handler
			p149: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p150: FH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
      			p151: FH_InsideOut{ ball = 3} -> Ply1_ad_regular_deep_handler
			p152: FH_InsideIn{ball = 1} -> Ply1_de_regular_deep_handler
			p153: FH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p154: FH_DownMid{ ball = 2} -> Ply1_mid_regular_deep_handler
			p155: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p156: FH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			p157: BH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p158: BH_DownLine { ball = 3} -> Ply1_ad_regular_deep_handler
			p159: BH_DownMid{ ball = 2} -> Ply1_mid_regular_deep_handler
			p160: BH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p161: BH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
      			p162: BH_InsideOut{ ball = 3} -> Ply1_ad_regular_deep_handler
			p163: BH_InsideIn{ball = 1} -> Ply1_de_regular_deep_handler
			p164: BH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p165: BH_DownMid{ ball = 2} -> Ply1_mid_regular_deep_handler
			p166: BH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p167: BH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};


// handlers
Ply2_de_regular_shallow_handler = pcase{
			p168: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p169: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
	};

Ply2_mid_regular_shallow_handler = pcase{
			p170: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p171: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
	};

Ply2_ad_regular_shallow_handler = pcase{
			p172: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p173: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
	};

// deep handlers
Ply2_de_regular_deep_handler = pcase{
			p174: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p175: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
	};

Ply2_mid_regular_deep_handler = pcase{
			p176: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p177: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
	};

Ply2_ad_regular_deep_handler = pcase{
			p178: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p179: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
	};
	
// deuce stroke is when player2 hit position is 6
Ply2_de_regular_shallow = pcase { // if already 
			p180: FH_Crosscourt { ball = 1;} -> Ply1_de_regular_shallow_handler
			p181: FH_Downline { ball = 3} -> Ply1_ad_regular_shallow_handler
			p182: FH_DownMid { ball = 2} -> Ply1_mid_regular_shallow_handler
			p183: BH_InsideIn {ball = 3} -> Ply1_ad_regular_shallow_handler
			p184: BH_InsideOut { ball = 1} -> Ply1_de_regular_shallow_handler
			p185: BH_DownMid { ball = 2} -> Ply1_mid_regular_shallow_handler
			p186: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p187: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid stroke is when player2 hit position is 5
Ply2_mid_regular_shallow = noMove -> pcase{
			p188: FH_InsideOut { ball = 3} -> Ply1_ad_regular_shallow_handler
			p189: FH_Crosscourt{ball = 1} -> Ply1_de_regular_shallow_handler
			p190: FH_DownMid { ball = 2 } -> Ply1_mid_regular_shallow_handler
			p191: BH_InsideOut { ball = 1} -> Ply1_de_regular_shallow_handler
			p192: BH_Crosscourt { ball = 3} -> Ply1_ad_regular_shallow_handler
			p193: BH_DownMid { ball = 2} -> Ply1_mid_regular_shallow_handler
			p194: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p195: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_regular_shallow = pcase{
			p196: FH_InsideOut { ball = 3} -> Ply1_ad_regular_shallow_handler
			p197: FH_InsideIn { ball = 1} -> Ply1_de_regular_shallow_handler
			p198: FH_DownMid { ball = 2} -> Ply1_mid_regular_shallow_handler
			p199: BH_Crosscourt { ball = 3} -> Ply1_ad_regular_shallow_handler
			p200: BH_Downline { ball = 1} -> Ply1_de_regular_shallow_handler
			p201: BH_DownMid { ball = 2 } -> Ply1_mid_regular_shallow_handler
			p202: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p203: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// deep actions

Ply2_de_regular_deep = noMove -> pcase{
			p204: FH_InsideOut { ball = 3} -> Ply1_ad_regular_deep_handler
			p205: FH_Crosscourt{ball = 1} -> Ply1_de_regular_deep_handler
			p206: FH_DownMid { ball = 2 } -> Ply1_mid_regular_deep_handler
			p207: BH_InsideOut { ball = 1} -> Ply1_de_regular_deep_handler
			p208: BH_Crosscourt { ball = 3} -> Ply1_ad_regular_deep_handler
			p209: BH_DownMid { ball = 2} -> Ply1_mid_regular_deep_handler
			p210: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p211: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

Ply2_mid_regular_deep = noMove -> pcase{
			p212: FH_InsideOut { ball = 3} -> Ply1_ad_regular_deep_handler
			p213: FH_Crosscourt{ball = 1} -> Ply1_de_regular_deep_handler
			p214: FH_DownMid { ball = 2 } -> Ply1_mid_regular_deep_handler
			p215: BH_InsideOut { ball = 1} -> Ply1_de_regular_deep_handler
			p216: BH_Crosscourt { ball = 3} -> Ply1_ad_regular_deep_handler
			p217: BH_DownMid { ball = 2} -> Ply1_mid_regular_deep_handler
			p218: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p219: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_regular_deep = pcase{
			p220: FH_InsideOut { ball = 3} -> Ply1_ad_regular_deep_handler
			p221: FH_InsideIn { ball = 1} -> Ply1_de_regular_deep_handler
			p222: FH_DownMid { ball = 2} -> Ply1_mid_regular_deep_handler
			p223: BH_Crosscourt { ball = 3} -> Ply1_ad_regular_deep_handler
			p224: BH_Downline { ball = 1} -> Ply1_de_regular_deep_handler
			p225: BH_DownMid { ball = 2 } -> Ply1_mid_regular_deep_handler
			p226: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p227: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

#define player1Win won == player1;
#assert TieBreakGame reaches player1Win with prob;