TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);
WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;
Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

De_Ply1Serve = pcase {                             
			p0: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p1: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p2: ServeWide_in{ball=6} -> Ply2_BackHandR 
			p3: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p4: Serve_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			p5: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p6: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p7: ServeWide_in{ball=6} -> Ply2_BackHandR 
			p8: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p9: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply1Serve = pcase {
			p10: ServeT_in{ball=5} -> Ply2_BackHandR  
			p11: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p12: ServeWide_in{ball=4} -> Ply2_ForeHandR
			p13: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p14: Serve_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			p15: ServeT_in{ball=5} -> Ply2_BackHandR  
			p16: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p17: ServeWide_in{ball=4} -> Ply2_ForeHandR
			p18: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p19: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };    
     		 
Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			p20: FH_InsideOut{ball=6} -> Ply2_de_regular_handler
			p21: FH_InsideIn{ball=4} -> Ply2_ad_regular_handler
			p22: FH_CrossCourt{ball=4} -> Ply2_ad_regular_handler
			p23: FH_DownMid{ball=5} -> Ply2_mid_regular_handler
			p24: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p25: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p26: FH_CrossCourt{ball=4} -> Ply2_ad_regular_handler
			p27: FH_DownLine{ball=6} -> Ply2_de_regular_handler
			p28: FH_DownMid{ball=5} -> Ply2_mid_regular_handler
			p29: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p30: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			p31: BH_CrossCourt{ball=6} -> Ply2_de_regular_handler
			p32: BH_DownLine{ball=4} -> Ply2_ad_regular_handler
			p33: BH_DownMid{ball=5} -> Ply2_mid_regular_handler
			p34: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p35: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p36: BH_CrossCourt{ball=6} -> Ply2_de_regular_handler
			p37: BH_InsideIn{ball=6} -> Ply2_de_regular_handler
			p38: BH_InsideOut{ball=4} -> Ply2_ad_regular_handler
			p39: BH_DownMid{ball=5} -> Ply2_mid_regular_handler
			p40: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p41: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};



Ply1_de_regular_handler = pcase{
			p42: React_Regular{ball=1} -> Ply1_de_regular
			p43: React_Smash{ball=1} -> Ply1_de_smash
			p44: React_Lob{ball=1} -> Ply1_de_lob
	};

Ply1_de_smash_handler = pcase{
			p45: React_Regular{ball=1} -> Ply1_de_regular
			p46: React_Smash{ball=1} -> Ply1_de_smash
			p47: React_Lob{ball=1} -> Ply1_de_lob
	};

Ply1_de_lob_handler = pcase{
			p48: React_Regular{ball=1} -> Ply1_de_regular
			p49: React_Smash{ball=1} -> Ply1_de_smash
			p50: React_Lob{ball=1} -> Ply1_de_lob
	};

Ply1_mid_regular_handler = pcase{
			p51: React_Regular{ball=2} -> Ply1_mid_regular
			p52: React_Smash{ball=2} -> Ply1_mid_smash
			p53: React_Lob{ball=2} -> Ply1_mid_lob
	};

Ply1_mid_smash_handler = pcase{
			p54: React_Regular{ball=2} -> Ply1_mid_regular
			p55: React_Smash{ball=2} -> Ply1_mid_smash
			p56: React_Lob{ball=2} -> Ply1_mid_lob
	};

Ply1_mid_lob_handler = pcase{
			p57: React_Regular{ball=2} -> Ply1_mid_regular
			p58: React_Smash{ball=2} -> Ply1_mid_smash
			p59: React_Lob{ball=2} -> Ply1_mid_lob
	};

Ply1_ad_regular_handler = pcase{
			p60: React_Regular{ball=3} -> Ply1_ad_regular
			p61: React_Smash{ball=3} -> Ply1_ad_smash
			p62: React_Lob{ball=3} -> Ply1_ad_lob
	};

Ply1_ad_smash_handler = pcase{
			p63: React_Regular{ball=3} -> Ply1_ad_regular
			p64: React_Smash{ball=3} -> Ply1_ad_smash
			p65: React_Lob{ball=3} -> Ply1_ad_lob
	};

Ply1_ad_lob_handler = pcase{
			p66: React_Regular{ball=3} -> Ply1_ad_regular
			p67: React_Smash{ball=3} -> Ply1_ad_smash
			p68: React_Lob{ball=3} -> Ply1_ad_lob
	};


// deuce regular regular is when player1 hit position is 1
Ply1_de_regular = pcase{
			p69: FH_InsideOut{ball=6} -> Ply2_de_regular_handler
			p70: FH_InsideIn{ball=4} -> Ply2_ad_regular_handler
			p71: FH_DownMid{ball=5} -> Ply2_mid_regular_handler
			p72: BH_Crosscourt{ball=6} -> Ply2_de_regular_handler
			p73: BH_Downline{ball=4} -> Ply2_ad_regular_handler
			p74: BH_DownMid{ball=5} -> Ply2_mid_regular_handler
			p75: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p76: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
	};
	
// mid regular regular is when player1 hit position is 2
Ply1_mid_regular = pcase{
			p77: FH_InsideOut{ball=6} -> Ply2_de_regular_handler
			p78: FH_Crosscourt{ball=4} -> Ply2_ad_regular_handler
			p79: FH_DownMid{ball=5} -> Ply2_mid_regular_handler			
			p80: BH_InsideOut{ball=4} -> Ply2_ad_regular_handler
			p81: BH_Crosscourt{ball=6} -> Ply2_de_regular_handler
			p82: BH_DownMid{ball=5} -> Ply2_mid_regular_handler
			p83: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p84: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};

// ad regular regular is when player1 hit position is 3
Ply1_ad_regular = pcase{
			p85: FH_Crosscourt{ball=4} -> Ply2_ad_regular_handler
			p86: FH_Downline{ball=6} -> Ply2_de_regular_handler
			p87: FH_DownMid{ball=5} -> Ply2_mid_regular_handler
			p88: BH_InsideIn{ball=6} -> Ply2_de_regular_handler
			p89: BH_InsideOut{ball=4} -> Ply2_ad_regular_handler
			p90: BH_DownMid{ball=5} -> Ply2_mid_regular_handler
			p91: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p92: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// deuce smash is when player1 hit position is 1
Ply1_de_smash = pcase{
			p93: FH_InsideOut{ball=6} -> Ply2_de_smash_handler
			p94: FH_InsideIn{ball=4} -> Ply2_ad_smash_handler
			p95: FH_DownMid{ball=5} -> Ply2_mid_smash_handler
			p96: BH_Crosscourt{ball=6} -> Ply2_de_smash_handler
			p97: BH_Downline{ball=4} -> Ply2_ad_smash_handler
			p98: BH_DownMid{ball=5} -> Ply2_mid_smash_handler
			p99: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p100: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid smash is when player1 hit position is 2
Ply1_mid_smash = pcase{
			p101: FH_InsideOut{ball=6} -> Ply2_de_smash_handler
			p102: FH_Crosscourt{ball=4} -> Ply2_ad_smash_handler
			p103: FH_DownMid{ball=5} -> Ply2_mid_smash_handler
			p104: BH_InsideOut{ball=4} -> Ply2_ad_smash_handler
			p105: BH_Crosscourt{ball=6} -> Ply2_de_smash_handler
			p106: BH_DownMid{ball=5} -> Ply2_mid_smash_handler
			p107: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p108: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};

// ad smash is when player1 hit position is 3
Ply1_ad_smash = pcase{
			p109: FH_Crosscourt{ball=4} -> Ply2_ad_smash_handler
			p110: FH_Downline{ball=6} -> Ply2_de_smash_handler
			p111: FH_DownMid{ball=5} -> Ply2_mid_smash_handler
			p112: BH_InsideIn{ball=6} -> Ply2_de_smash_handler
			p113: BH_InsideOut{ball=4} -> Ply2_ad_smash_handler
			p114: BH_DownMid{ball=5} -> Ply2_mid_smash_handler
			p115: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p116: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// deuce lob is when player1 hit position is 1
Ply1_de_lob = pcase{
			p117: FH_InsideOut{ball=6} -> Ply2_de_lob_handler
			p118: FH_InsideIn{ball=4} -> Ply2_ad_lob_handler
			p119: FH_DownMid{ball=5} -> Ply2_mid_lob_handler
			p120: BH_Crosscourt{ball=6} -> Ply2_de_lob_handler
			p121: BH_Downline{ball=4} -> Ply2_ad_lob_handler
			p122: BH_DownMid{ball=5} -> Ply2_mid_lob_handler	
			p123: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p124: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid lob is when player1 hit position is 2
Ply1_mid_lob = pcase{
			p125: FH_InsideOut{ball=6} -> Ply2_de_lob_handler
			p126: FH_Crosscourt{ball=4} -> Ply2_ad_lob_handler
			p127: FH_DownMid{ball=5} -> Ply2_mid_lob_handler
			p128: BH_InsideOut{ball=4} -> Ply2_ad_lob_handler
			p129: BH_Crosscourt{ball=6} -> Ply2_de_lob_handler
			p130: BH_DownMid{ball=5} -> Ply2_mid_lob_handler
			p131: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p132: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};

// ad lob is when player1 hit position is 3
Ply1_ad_lob = pcase{
			p133: FH_Crosscourt{ball=4} -> Ply2_ad_lob_handler
			p134: FH_Downline{ball=6} -> Ply2_de_lob_handler
			p135: FH_DownMid{ball=5} -> Ply2_mid_lob_handler
			p136: BH_InsideIn{ball=6} -> Ply2_de_lob_handler
			p137: BH_InsideOut{ball=4} -> Ply2_ad_lob_handler
			p138: BH_DownMid{ball=5} -> Ply2_mid_lob_handler
			p139: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p140: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};


De_Ply2Serve = pcase {
			p141: ServeT_in{ball=2} -> Ply1_ForeHandR
			p142: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p143: ServeWide_in{ball=1} -> Ply1_BackHandR
			p144: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p145: Serve_err{ball=9} -> De_Ply2Serve_2nd}; 

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			p146: ServeT_in{ball=2} -> Ply1_ForeHandR
			p147: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p148: ServeWide_in{ball=1} -> Ply1_BackHandR
			p149: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p150: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ad_Ply2Serve = pcase {
			p151: ServeT_in{ball=2} -> Ply1_BackHandR
			p152: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p153: ServeWide_in{ball=3} -> Ply1_ForeHandR
			p154: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p155: Serve_err{ball=9} -> Ad_Ply2Serve_2nd}; 

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			p156: ServeT_in{ball=2} -> Ply1_BackHandR
			p157: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p158: ServeWide_in{ball=3} -> Ply1_ForeHandR
			p159: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p160: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			p161: FH_InsideOut{ball = 1} -> Ply1_de_regular_handler
			p162: FH_InsideIn{ball = 3} -> Ply1_ad_regular_handler
			p163: FH_CrossCourt{ball = 3} -> Ply1_ad_regular_handler
			p164: FH_DownMid{ball = 2} -> Ply1_mid_regular_handler
			p165: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p166: FH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
      		p167: FH_CrossCourt{ ball = 3} -> Ply1_ad_regular_handler
			p168: FH_DownLine{ball = 1} -> Ply1_de_regular_handler
			p169: FH_DownMid{ ball = 2} -> Ply1_mid_regular_handler
			p170: FH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p171: FH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};
      		 
Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
			pcase {
			p172: BH_CrossCourt{ball = 1} -> Ply1_de_regular_handler
			p173: BH_DownLine{ball = 3} -> Ply1_ad_regular_handler
			p174: BH_DownMid{ball = 2} -> Ply1_mid_regular_handler
			p175: BH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                      else { turn = (turn+1)%4} }-> NextPt
			p176: BH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p177: BH_CrossCourt{ball = 1} -> Ply1_de_regular_handler
			p178: BH_InsideIn{ball = 1} -> Ply1_de_regular_handler
			p179: BH_InsideOut{ball = 3} -> Ply1_ad_regular_handler
			p180: BH_DownMid{ball = 2} -> Ply1_mid_regular_handler
			p181: BH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p182: BH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt			
      		 }};

// handlers
Ply2_de_regular_handler = pcase{
			p183: React_Regular{ball=6} -> Ply2_de_regular
			p184: React_Smash{ball=6} -> Ply2_de_smash
			p185: React_Lob{ball=6} -> Ply2_de_lob 
	};

Ply2_de_smash_handler = pcase{
			p186: React_Regular{ball=6} -> Ply2_de_regular
			p187: React_Smash{ball=6} -> Ply2_de_smash
			p188: React_Lob{ball=6} -> Ply2_de_lob 
	};

Ply2_de_lob_handler = pcase{
			p189: React_Regular{ball=6} -> Ply2_de_regular
			p190: React_Smash{ball=6} -> Ply2_de_smash
			p191: React_Lob{ball=6} -> Ply2_de_lob 
	};

Ply2_mid_regular_handler = pcase{
			p192: React_Regular{ball=5} -> Ply2_mid_regular
			p193: React_Smash{ball=5} -> Ply2_mid_smash
			p194: React_Lob{ball=5} -> Ply2_mid_lob 
	};

Ply2_mid_smash_handler = pcase{
			p195: React_Regular{ball=5} -> Ply2_mid_regular
			p196: React_Smash{ball=5} -> Ply2_mid_smash
			p197: React_Lob{ball=5} -> Ply2_mid_lob 
	};

Ply2_mid_lob_handler = pcase{
			p198: React_Regular{ball=5} -> Ply2_mid_regular
			p199: React_Smash{ball=5} -> Ply2_mid_smash
			p200: React_Lob{ball=5} -> Ply2_mid_lob 
	};

Ply2_ad_regular_handler = pcase{
			p201: React_Regular{ball=4} -> Ply2_ad_regular
			p202: React_Smash{ball=4} -> Ply2_ad_smash
			p203: React_Lob{ball=4} -> Ply2_ad_lob 
	};

Ply2_ad_smash_handler = pcase{
			p204: React_Regular{ball=4} -> Ply2_ad_regular
			p205: React_Smash{ball=4} -> Ply2_ad_smash
			p206: React_Lob{ball=4} -> Ply2_ad_lob 
	};

Ply2_ad_lob_handler = pcase{
			p207: React_Regular{ball=4} -> Ply2_ad_regular
			p208: React_Smash{ball=4} -> Ply2_ad_smash
			p209: React_Lob{ball=4} -> Ply2_ad_lob 
	};



// deuce regular is when player2 hit position is 6
Ply2_de_regular = pcase { // if already 
			p210: FH_InsideOut {ball = 1} -> Ply1_de_regular_handler
			p211: FH_insideIn {ball = 3} -> Ply1_ad_regular_handler
			p212: FH_DownMid {ball = 2} -> Ply1_mid_regular_handler
			p213: BH_Crosscourt {ball = 1} -> Ply1_de_regular_handler
			p214: BH_Downline {ball = 3} -> Ply1_ad_regular_handler
			p215: BH_DownMid {ball = 2} -> Ply1_mid_regular_handler
			p216: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p217: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid regular is when player2 hit position is 5
Ply2_mid_regular = noMove -> pcase{
			p218: FH_InsideOut {ball = 1} -> Ply1_de_regular_handler
			p219: FH_Crosscourt{ball = 3} -> Ply1_ad_regular_handler
			p220: FH_DownMid {ball = 2} -> Ply1_mid_regular_handler
			p221: BH_InsideOut {ball = 3} -> Ply1_ad_regular_handler
			p222: BH_Crosscourt {ball = 1} -> Ply1_de_regular_handler
			p223: BH_DownMid {ball = 2} -> Ply1_mid_regular_handler
			p224: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p225: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad regular is when player 2 hit position is 4
Ply2_ad_regular = pcase{
			p226: FH_Crosscourt {ball = 3} -> Ply1_ad_regular_handler
			p227: FH_Downline {ball = 1} -> Ply1_de_regular_handler
			p228: FH_DownMid {ball = 2} -> Ply1_mid_regular_handler
			p229: BH_InsideIn {ball = 1} -> Ply1_de_regular_handler
			p230: BH_InsideOut {ball = 3} -> Ply1_ad_regular_handler
			p231: BH_DownMid {ball = 2} -> Ply1_mid_regular_handler
			p232: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p233: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	}; 


// deuce smash is when player2 hit position is 6
Ply2_de_smash = pcase { // if already 
			p234: FH_InsideOut {ball = 1} -> Ply1_de_smash_handler
			p235: FH_InsideIn {ball = 3} -> Ply1_ad_smash_handler
			p236: FH_DownMid {ball = 2} -> Ply1_mid_smash_handler
			p237: BH_Crosscourt {ball = 1} -> Ply1_de_smash_handler
			p238: BH_Downline {ball = 3} -> Ply1_ad_smash_handler
			p239: BH_DownMid {ball = 2} -> Ply1_mid_smash_handler
			p240: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p241: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid smash is when player2 hit position is 5
Ply2_mid_smash = noMove -> pcase{
			p242: FH_InsideOut {ball = 1} -> Ply1_de_smash_handler
			p243: FH_Crosscourt{ball = 3} -> Ply1_ad_smash_handler
			p244: FH_DownMid {ball = 2} -> Ply1_mid_smash_handler
			p245: BH_InsideOut {ball = 3} -> Ply1_ad_smash_handler
			p246: BH_Crosscourt {ball = 1} -> Ply1_de_smash_handler
			p247: BH_DownMid {ball = 2} -> Ply1_mid_smash_handler
			p248: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p249: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad smash is when player 2 hit position is 4
Ply2_ad_smash = pcase{
			p250: FH_Crosscourt {ball = 3} -> Ply1_ad_smash_handler
			p251: FH_Downline {ball = 1} -> Ply1_de_smash_handler
			p252: FH_DownMid {ball = 2} -> Ply1_mid_smash_handler
			p253: BH_InsideIn {ball = 1} -> Ply1_de_smash_handler
			p254: BH_InsideOut {ball = 3} -> Ply1_ad_smash_handler
			p255: BH_DownMid {ball = 2} -> Ply1_mid_smash_handler
			p256: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p257: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};    



// deuce lob is when player2 hit position is 6
Ply2_de_lob = pcase { // if already 
			p258: FH_InsideOut {ball = 1} -> Ply1_de_lob_handler
			p259: FH_insideIn {ball = 3} -> Ply1_ad_lob_handler
			p260: FH_DownMid {ball = 2} -> Ply1_mid_lob_handler
			p261: BH_Crosscourt {ball = 1} -> Ply1_de_lob_handler
			p262: BH_Downline {ball = 3} -> Ply1_ad_lob_handler
			p263: BH_DownMid {ball = 2} -> Ply1_mid_lob_handler
			p264: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p265: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid lob is when player2 hit position is 5
Ply2_mid_lob = noMove -> pcase{
			p266: FH_InsideOut {ball = 1} -> Ply1_de_lob_handler
			p267: FH_Crosscourt{ball = 3} -> Ply1_ad_lob_handler
			p268: FH_DownMid {ball = 2} -> Ply1_mid_lob_handler
			p269: BH_InsideOut {ball = 3} -> Ply1_ad_lob_handler
			p270: BH_Crosscourt {ball = 1} -> Ply1_de_lob_handler
			p271: BH_DownMid {ball = 2} -> Ply1_mid_lob_handler
			p272: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p273: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad lob is when player 2 hit position is 4
Ply2_ad_lob = pcase{
			p274: FH_Crosscourt {ball = 3} -> Ply1_ad_lob_handler
			p275: FH_Downline {ball = 1} -> Ply1_de_lob_handler
			p276: FH_DownMid {ball = 2} -> Ply1_mid_lob_handler
			p277: BH_InsideIn {ball = 1} -> Ply1_de_lob_handler
			p278: BH_InsideOut {ball = 3} -> Ply1_ad_lob_handler
			p279: BH_DownMid {ball = 2} -> Ply1_mid_lob_handler
			p280: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p281: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};    	



#define player1Win won == player1;
#assert TieBreakGame reaches player1Win with prob;