TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);
WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;
Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

De_Ply1Serve = pcase {                             
			p0: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p1: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p2: ServeWide_in{ball=6} -> Ply2_BackHandR 
			p3: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p4: Serve_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			p5: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p6: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p7: ServeWide_in{ball=6} -> Ply2_BackHandR 
			p8: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p9: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply1Serve = pcase {
			p10: ServeT_in{ball=5} -> Ply2_BackHandR  
			p11: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p12: ServeWide_in{ball=4} -> Ply2_ForeHandR
			p13: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p14: Serve_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			p15: ServeT_in{ball=5} -> Ply2_BackHandR  
			p16: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p17: ServeWide_in{ball=4} -> Ply2_ForeHandR
			p18: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p19: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };    
     		 
Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			p20: FH_CrossCourt{ball=6} -> Ply2_de_regular_deep_handler
			p21: FH_DownLine{ball=4} -> Ply2_ad_regular_deep_handler
			p22: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p23: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p24: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p25: FH_InsideOut{ball =4} -> Ply2_ad_regular_deep_handler
			p26: FH_InsideIn{ball=6} -> Ply2_de_regular_deep_handler
			p27: FH_CrossCourt{ball=6} -> Ply2_de_regular_deep_handler
			p28: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p29: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p30: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			p31: BH_CrossCourt{ball=4} -> Ply2_ad_regular_deep_handler
			p32: BH_InsideIn{ball=4} -> Ply2_ad_regular_deep_handler
			p33: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p34: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p35: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p36: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p37: BH_CrossCourt{ball=4} -> Ply2_ad_regular_deep_handler
			p38: BH_DownLine{ball=6} -> Ply2_de_regular_deep_handler
			p39: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p40: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p41: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

// handlers
Ply1_de_regular_shallow_handler = pcase{
			p42: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p43: React_Smash_Shallow{ball=1} -> Ply1_de_smash_shallow
			p44: React_Lob_Shallow{ball=1} -> Ply1_de_lob_shallow
			p45: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p46: React_Smash_Deep{ball=1} -> Ply1_de_smash_deep
			p47: React_Lob_Deep{ball=1} -> Ply1_de_lob_deep
	};

Ply1_de_smash_shallow_handler = pcase{
			p48: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p49: React_Smash_Shallow{ball=1} -> Ply1_de_smash_shallow
			p50: React_Lob_Shallow{ball=1} -> Ply1_de_lob_shallow
			p51: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p52: React_Smash_Deep{ball=1} -> Ply1_de_smash_deep
			p53: React_Lob_Deep{ball=1} -> Ply1_de_lob_deep
	};

Ply1_de_lob_shallow_handler = pcase{
			p54: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p55: React_Smash_Shallow{ball=1} -> Ply1_de_smash_shallow
			p56: React_Lob_Shallow{ball=1} -> Ply1_de_lob_shallow
			p57: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p58: React_Smash_Deep{ball=1} -> Ply1_de_smash_deep
			p59: React_Lob_Deep{ball=1} -> Ply1_de_lob_deep
	};

Ply1_mid_regular_shallow_handler = pcase{
			p60: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p61: React_Smash_Shallow{ball=2} -> Ply1_mid_smash_shallow
			p62: React_Lob_Shallow{ball=2} -> Ply1_mid_lob_shallow
			p63: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p64: React_Smash_Deep{ball=2} -> Ply1_mid_smash_deep
			p65: React_Lob_Deep{ball=2} -> Ply1_mid_lob_deep
	};

Ply1_mid_smash_shallow_handler = pcase{
			p66: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p67: React_Smash_Shallow{ball=2} -> Ply1_mid_smash_shallow
			p68: React_Lob_Shallow{ball=2} -> Ply1_mid_lob_shallow
			p69: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p70: React_Smash_Deep{ball=2} -> Ply1_mid_smash_deep
			p71: React_Lob_Deep{ball=2} -> Ply1_mid_lob_deep
	};

Ply1_mid_lob_shallow_handler = pcase{
			p72: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p73: React_Smash_Shallow{ball=2} -> Ply1_mid_smash_shallow
			p74: React_Lob_Shallow{ball=2} -> Ply1_mid_lob_shallow
			p75: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p76: React_Smash_Deep{ball=2} -> Ply1_mid_smash_deep
			p77: React_Lob_Deep{ball=2} -> Ply1_mid_lob_deep
	};

Ply1_ad_regular_shallow_handler = pcase{
			p78: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p79: React_Smash_Shallow{ball=3} -> Ply1_ad_smash_shallow
			p80: React_Lob_Shallow{ball=3} -> Ply1_ad_lob_shallow
			p81: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p82: React_Smash_Deep{ball=3} -> Ply1_ad_smash_deep
			p83: React_Lob_Deep{ball=3} -> Ply1_ad_lob_deep
	};

Ply1_ad_smash_shallow_handler = pcase{
			p84: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p85: React_Smash_Shallow{ball=3} -> Ply1_ad_smash_shallow
			p86: React_Lob_Shallow{ball=3} -> Ply1_ad_lob_shallow
			p87: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p88: React_Smash_Deep{ball=3} -> Ply1_ad_smash_deep
			p89: React_Lob_Deep{ball=3} -> Ply1_ad_lob_deep
	};

Ply1_ad_lob_shallow_handler = pcase{
			p90: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p91: React_Smash_Shallow{ball=3} -> Ply1_ad_smash_shallow
			p92: React_Lob_Shallow{ball=3} -> Ply1_ad_lob_shallow
			p93: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p94: React_Smash_Deep{ball=3} -> Ply1_ad_smash_deep
			p95: React_Lob_Deep{ball=3} -> Ply1_ad_lob_deep
	};

// deep handlers
Ply1_de_regular_deep_handler = pcase{
			p96: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p97: React_Smash_Shallow{ball=1} -> Ply1_de_smash_shallow
			p98: React_Lob_Shallow{ball=1} -> Ply1_de_lob_shallow
			p99: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p100: React_Smash_Deep{ball=1} -> Ply1_de_smash_deep
			p101: React_Lob_Deep{ball=1} -> Ply1_de_lob_deep
	};

Ply1_de_smash_deep_handler = pcase{
			p102: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p103: React_Smash_Shallow{ball=1} -> Ply1_de_smash_shallow
			p104: React_Lob_Shallow{ball=1} -> Ply1_de_lob_shallow
			p105: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p106: React_Smash_Deep{ball=1} -> Ply1_de_smash_deep
			p107: React_Lob_Deep{ball=1} -> Ply1_de_lob_deep
	};

Ply1_de_lob_deep_handler = pcase{
			p108: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p109: React_Smash_Shallow{ball=1} -> Ply1_de_smash_shallow
			p110: React_Lob_Shallow{ball=1} -> Ply1_de_lob_shallow
			p111: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p112: React_Smash_Deep{ball=1} -> Ply1_de_smash_deep
			p113: React_Lob_Deep{ball=1} -> Ply1_de_lob_deep
	};

Ply1_mid_regular_deep_handler = pcase{
			p114: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p115: React_Smash_Shallow{ball=2} -> Ply1_mid_smash_shallow
			p116: React_Lob_Shallow{ball=2} -> Ply1_mid_lob_shallow
			p117: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p118: React_Smash_Deep{ball=2} -> Ply1_mid_smash_deep
			p119: React_Lob_Deep{ball=2} -> Ply1_mid_lob_deep
	};

Ply1_mid_smash_deep_handler = pcase{
			p120: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p121: React_Smash_Shallow{ball=2} -> Ply1_mid_smash_shallow
			p122: React_Lob_Shallow{ball=2} -> Ply1_mid_lob_shallow
			p123: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p124: React_Smash_Deep{ball=2} -> Ply1_mid_smash_deep
			p125: React_Lob_Deep{ball=2} -> Ply1_mid_lob_deep
	};

Ply1_mid_lob_deep_handler = pcase{
			p126: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p127: React_Smash_Shallow{ball=2} -> Ply1_mid_smash_shallow
			p128: React_Lob_Shallow{ball=2} -> Ply1_mid_lob_shallow
			p129: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p130: React_Smash_Deep{ball=2} -> Ply1_mid_smash_deep
			p131: React_Lob_Deep{ball=2} -> Ply1_mid_lob_deep
	};

Ply1_ad_regular_deep_handler = pcase{
			p132: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p133: React_Smash_Shallow{ball=3} -> Ply1_ad_smash_shallow
			p134: React_Lob_Shallow{ball=3} -> Ply1_ad_lob_shallow
			p135: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p136: React_Smash_Deep{ball=3} -> Ply1_ad_smash_deep
			p137: React_Lob_Deep{ball=3} -> Ply1_ad_lob_deep
	};

Ply1_ad_smash_deep_handler = pcase{
			p138: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p139: React_Smash_Shallow{ball=3} -> Ply1_ad_smash_shallow
			p140: React_Lob_Shallow{ball=3} -> Ply1_ad_lob_shallow
			p141: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p142: React_Smash_Deep{ball=3} -> Ply1_ad_smash_deep
			p143: React_Lob_Deep{ball=3} -> Ply1_ad_lob_deep
	};

Ply1_ad_lob_deep_handler = pcase{
			p144: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p145: React_Smash_Shallow{ball=3} -> Ply1_ad_smash_shallow
			p146: React_Lob_Shallow{ball=3} -> Ply1_ad_lob_shallow
			p147: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p148: React_Smash_Deep{ball=3} -> Ply1_ad_smash_deep
			p149: React_Lob_Deep{ball=3} -> Ply1_ad_lob_deepep
	};

// shallow actions

// deuce regular is when player1 hit position is 1
Ply1_de_regular_shallow = pcase{
			p150: FH_Crosscourt{ball=6} -> Ply2_de_regular_shallow_handler
			p151: FH_Downline{ball=4} -> Ply2_ad_regular_shallow_handler
			p152: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p153: BH_InsideIn{ball=4} -> Ply2_ad_regular_shallow_handler
			p154: BH_InsideOut{ball=6} -> Ply2_de_regular_shallow_handler
			p155: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p156: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p157: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid regular is when player1 hit position is 2
Ply1_mid_regular_shallow = pcase{
			p158: FH_InsideOut{ball=4} -> Ply2_ad_regular_shallow_handler
			p159: FH_Crosscourt{ball=6} -> Ply2_de_regular_shallow_handler
			p160: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p161: BH_InsideOut{ball=6} -> Ply2_de_regular_shallow_handler
			p162: BH_Crosscourt{ball=4} -> Ply2_ad_regular_shallow_handler
			p163: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p164: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p165: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad regular is when player1 hit position is 3
Ply1_ad_regular_shallow = pcase{
			p166: FH_InsideOut{ball=4} -> Ply2_ad_regular_shallow_handler
			p167: FH_InsideIn{ball=6} -> Ply2_de_regular_shallow_handler
			p168: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p169: BH_Crosscourt{ball=4} -> Ply2_ad_regular_shallow_handler
			p170: BH_Downline{ball=6} -> Ply2_de_regular_shallow_handler
			p171: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p172: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p173: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// smashes

// deuce regular is when player1 hit position is 1
Ply1_de_smash_shallow = pcase{
			p174: FH_Crosscourt{ball=6} -> Ply2_de_smash_shallow_handler
			p175: FH_Downline{ball=4} -> Ply2_ad_smash_shallow_handler
			p176: FH_DownMid{ball=5} -> Ply2_mid_smash_shallow_handler
			p177: BH_InsideIn{ball=4} -> Ply2_ad_smash_shallow_handler
			p178: BH_InsideOut{ball=6} -> Ply2_de_smash_shallow_handler
			p179: BH_DownMid{ball=5} -> Ply2_mid_smash_shallow_handler
			p180: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p181: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid regular is when player1 hit position is 2
Ply1_mid_smash_shallow = pcase{
			p182: FH_InsideOut{ball=4} -> Ply2_ad_smash_shallow_handler
			p183: FH_Crosscourt{ball=6} -> Ply2_de_smash_shallow_handler
			p184: FH_DownMid{ball=5} -> Ply2_mid_smash_shallow_handler
			p185: BH_InsideOut{ball=6} -> Ply2_de_smash_shallow_handler
			p186: BH_Crosscourt{ball=4} -> Ply2_ad_smash_shallow_handler
			p187: BH_DownMid{ball=5} -> Ply2_mid_smash_shallow_handler
			p188: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p189: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad regular is when player1 hit position is 3
Ply1_ad_smash_shallow = pcase{
			p190: FH_InsideOut{ball=4} -> Ply2_ad_smash_shallow_handler
			p191: FH_InsideIn{ball=6} -> Ply2_de_smash_shallow_handler
			p192: FH_DownMid{ball=5} -> Ply2_mid_smash_shallow_handler
			p193: BH_Crosscourt{ball=4} -> Ply2_ad_smash_shallow_handler
			p194: BH_Downline{ball=6} -> Ply2_de_smash_shallow_handler
			p195: BH_DownMid{ball=5} -> Ply2_mid_smash_shallow_handler
			p196: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p197: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// lobs

// deuce regular is when player1 hit position is 1
Ply1_de_lob_shallow = pcase{
			p198: FH_Crosscourt{ball=6} -> Ply2_de_lob_shallow_handler
			p199: FH_Downline{ball=4} -> Ply2_ad_lob_shallow_handler
			p200: FH_DownMid{ball=5} -> Ply2_mid_lob_shallow_handler
			p201: BH_InsideIn{ball=4} -> Ply2_ad_lob_shallow_handler
			p202: BH_InsideOut{ball=6} -> Ply2_de_lob_shallow_handler
			p203: BH_DownMid{ball=5} -> Ply2_mid_lob_shallow_handler
			p204: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p205: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid regular is when player1 hit position is 2
Ply1_mid_lob_shallow = pcase{
			p206: FH_InsideOut{ball=4} -> Ply2_ad_lob_shallow_handler
			p207: FH_Crosscourt{ball=6} -> Ply2_de_lob_shallow_handler
			p208: FH_DownMid{ball=5} -> Ply2_mid_lob_shallow_handler
			p209: BH_InsideOut{ball=6} -> Ply2_de_lob_shallow_handler
			p210: BH_Crosscourt{ball=4} -> Ply2_ad_lob_shallow_handler
			p211: BH_DownMid{ball=5} -> Ply2_mid_lob_shallow_handler
			p212: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p213: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad regular is when player1 hit position is 3
Ply1_ad_lob_shallow = pcase{
			p214: FH_InsideOut{ball=4} -> Ply2_ad_lob_shallow_handler
			p215: FH_InsideIn{ball=6} -> Ply2_de_lob_shallow_handler
			p216: FH_DownMid{ball=5} -> Ply2_mid_lob_shallow_handler
			p217: BH_Crosscourt{ball=4} -> Ply2_ad_lob_shallow_handler
			p218: BH_Downline{ball=6} -> Ply2_de_lob_shallow_handler
			p219: BH_DownMid{ball=5} -> Ply2_mid_lob_shallow_handler
			p220: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p221: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// deep actions

// deuce regular is when player1 hit position is 1
Ply1_de_regular_deep = pcase{
			p222: FH_Crosscourt{ball=6} -> Ply2_de_regular_deep_handler
			p223: FH_Downline{ball=4} -> Ply2_ad_regular_deep_handler
			p224: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p225: BH_InsideIn{ball=4} -> Ply2_ad_regular_deep_handler
			p226: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p227: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p228: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p229: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid regular is when player1 hit position is 2
Ply1_mid_regular_deep = pcase{
			p230: FH_InsideOut{ball=4} -> Ply2_ad_regular_deep_handler
			p231: FH_Crosscourt{ball=6} -> Ply2_de_regular_deep_handler
			p232: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p233: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p234: BH_Crosscourt{ball=4} -> Ply2_ad_regular_deep_handler
			p235: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p236: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p237: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad regular is when player1 hit position is 3
Ply1_ad_regular_deep = pcase{
			p238: FH_InsideOut{ball=4} -> Ply2_ad_regular_deep_handler
			p239: FH_InsideIn{ball=6} -> Ply2_de_regular_deep_handler
			p240: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p241: BH_Crosscourt{ball=4} -> Ply2_ad_regular_deep_handler
			p242: BH_Downline{ball=6} -> Ply2_de_regular_deep_handler
			p243: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p244: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p245: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// smashes

// deuce regular is when player1 hit position is 1
Ply1_de_smash_deep = pcase{
			p246: FH_Crosscourt{ball=6} -> Ply2_de_smash_deep_handler
			p247: FH_Downline{ball=4} -> Ply2_ad_smash_deep_handler
			p248: FH_DownMid{ball=5} -> Ply2_mid_smash_deep_handler
			p249: BH_InsideIn{ball=4} -> Ply2_ad_smash_deep_handler
			p250: BH_InsideOut{ball=6} -> Ply2_de_smash_deep_handler
			p251: BH_DownMid{ball=5} -> Ply2_mid_smash_deep_handler
			p252: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p253: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid regular is when player1 hit position is 2
Ply1_mid_smash_deep = pcase{
			p254: FH_InsideOut{ball=4} -> Ply2_ad_smash_deep_handler
			p255: FH_Crosscourt{ball=6} -> Ply2_de_smash_deep_handler
			p256: FH_DownMid{ball=5} -> Ply2_mid_smash_deep_handler
			p257: BH_InsideOut{ball=6} -> Ply2_de_smash_deep_handler
			p258: BH_Crosscourt{ball=4} -> Ply2_ad_smash_deep_handler
			p259: BH_DownMid{ball=5} -> Ply2_mid_smash_deep_handler
			p260: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p261: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad regular is when player1 hit position is 3
Ply1_ad_smash_deep = pcase{
			p262: FH_InsideOut{ball=4} -> Ply2_ad_smash_deep_handler
			p263: FH_InsideIn{ball=6} -> Ply2_de_smash_deep_handler
			p264: FH_DownMid{ball=5} -> Ply2_mid_smash_deep_handler
			p265: BH_Crosscourt{ball=4} -> Ply2_ad_smash_deep_handler
			p266: BH_Downline{ball=6} -> Ply2_de_smash_deep_handler
			p267: BH_DownMid{ball=5} -> Ply2_mid_smash_deep_handler
			p268: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p269: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// lobs

// deuce regular is when player1 hit position is 1
Ply1_de_lob_deep = pcase{
			p270: FH_Crosscourt{ball=6} -> Ply2_de_lob_deep_handler
			p271: FH_Downline{ball=4} -> Ply2_ad_lob_deep_handler
			p272: FH_DownMid{ball=5} -> Ply2_mid_lob_deep_handler
			p273: BH_InsideIn{ball=4} -> Ply2_ad_lob_deep_handler
			p274: BH_InsideOut{ball=6} -> Ply2_de_lob_deep_handler
			p275: BH_DownMid{ball=5} -> Ply2_mid_lob_deep_handler
			p276: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p277: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid regular is when player1 hit position is 2
Ply1_mid_lob_deep = pcase{
			p278: FH_InsideOut{ball=4} -> Ply2_ad_lob_deep_handler
			p279: FH_Crosscourt{ball=6} -> Ply2_de_lob_deep_handler
			p280: FH_DownMid{ball=5} -> Ply2_mid_lob_deep_handler
			p281: BH_InsideOut{ball=6} -> Ply2_de_lob_deep_handler
			p282: BH_Crosscourt{ball=4} -> Ply2_ad_lob_deep_handler
			p283: BH_DownMid{ball=5} -> Ply2_mid_lob_deep_handler
			p284: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p285: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad regular is when player1 hit position is 3
Ply1_ad_lob_deep = pcase{
			p286: FH_InsideOut{ball=4} -> Ply2_ad_lob_deep_handler
			p287: FH_InsideIn{ball=6} -> Ply2_de_lob_deep_handler
			p288: FH_DownMid{ball=5} -> Ply2_mid_lob_deep_handler
			p289: BH_Crosscourt{ball=4} -> Ply2_ad_lob_deep_handler
			p290: BH_Downline{ball=6} -> Ply2_de_lob_deep_handler
			p291: BH_DownMid{ball=5} -> Ply2_mid_lob_deep_handler
			p292: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p293: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

De_Ply2Serve = pcase {
			p294: ServeT_in{ball=2} -> Ply1_BackHandR
			p295: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p296: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p297: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p298: Serve_err{ball=9} -> De_Ply2Serve_2nd}; 

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			p299: ServeT_in{ball=2} -> Ply1_BackHandR
			p300: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p301: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p302: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p303: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ad_Ply2Serve = pcase {
			p304: ServeT_in{ball=2} -> Ply1_ForeHandR
			p305: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p306: ServeWide_in{ball=3} -> Ply1_BackHandR
			p307: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p308: Serve_err{ball=9} -> Ad_Ply2Serve_2nd}; 

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			p309: ServeT_in{ball=2} -> Ply1_ForeHandR
			p310: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p311: ServeWide_in{ball=3} -> Ply1_BackHandR
			p312: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p313: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			p314: FH_InsideOut{ball = 1} -> Ply1_de_regular_deep_handler
			p315: FH_InsideIn{ball = 3} -> Ply1_ad_regular_deep_handler
			p316: FH_CrossCourt{ball = 3} -> Ply1_ad_regular_deep_handler
			p317: FH_DownMid{ball = 2} -> Ply1_mid_regular_deep_handler
			p318: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p319: FH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
      			p320: FH_CrossCourt{ ball = 3} -> Ply1_ad_regular_deep_handler
			p321: FH_DownLine{ball = 1} -> Ply1_de_regular_deep_handler
			p322: FH_DownMid{ ball = 2} -> Ply1_mid_regular_deep_handler
			p323: FH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p324: FH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};
      		 
Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
			pcase {
			p325: BH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p326: BH_DownLine{ball = 3} -> Ply1_ad_regular_deep_handler
			p327: BH_DownMid{ball = 2} -> Ply1_mid_regular_deep_handler
			p328: BH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                      else { turn = (turn+1)%4} }-> NextPt
			p329: BH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p330: BH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p331: BH_InsideIn{ball = 1} -> Ply1_de_regular_deep_handler
			p332: BH_InsideOut{ball = 3} -> Ply1_ad_regular_deep_handler
			p333: BH_DownMid{ball = 2} -> Ply1_mid_regular_deep_handler
			p334: BH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p335: BH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt			
      		 }};

// handlers
Ply2_de_regular_shallow_handler = pcase{
			p336: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p337: React_Smash_Shallow{ball=6} -> Ply2_de_smash_shallow
			p338: React_Lob_Shallow{ball=6} -> Ply2_de_lob_shallow
			p339: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p340: React_Smash_Deep{ball=6} -> Ply2_de_smash_deep
			p341: React_Lob_Deep{ball=6} -> Ply2_de_lob_deep
	};

Ply2_de_smash_shallow_handler = pcase{
			p342: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p343: React_Smash_Shallow{ball=6} -> Ply2_de_smash_shallow
			p344: React_Lob_Shallow{ball=6} -> Ply2_de_lob_shallow
			p345: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p346: React_Smash_Deep{ball=6} -> Ply2_de_smash_deep
			p347: React_Lob_Deep{ball=6} -> Ply2_de_lob_deep
	};

Ply2_de_lob_shallow_handler = pcase{
			p348: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p349: React_Smash_Shallow{ball=6} -> Ply2_de_smash_shallow
			p350: React_Lob_Shallow{ball=6} -> Ply2_de_lob_shallow
			p351: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p352: React_Smash_Deep{ball=6} -> Ply2_de_smash_deep
			p353: React_Lob_Deep{ball=6} -> Ply2_de_lob_deep
	};

Ply2_mid_regular_shallow_handler = pcase{
			p354: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p355: React_Smash_Shallow{ball=5} -> Ply2_mid_smash_shallow
			p356: React_Lob_Shallow{ball=5} -> Ply2_mid_lob_shallow
			p357: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p358: React_Smash_Deep{ball=5} -> Ply2_mid_smash_deep
			p359: React_Lob_Deep{ball=5} -> Ply2_mid_lob_deep
	};

Ply2_mid_smash_shallow_handler = pcase{
			p360: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p361: React_Smash_Shallow{ball=5} -> Ply2_mid_smash_shallow
			p362: React_Lob_Shallow{ball=5} -> Ply2_mid_lob_shallow
			p363: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p364: React_Smash_Deep{ball=5} -> Ply2_mid_smash_deep
			p365: React_Lob_Deep{ball=5} -> Ply2_mid_lob_deep
	};

Ply2_mid_lob_shallow_handler = pcase{
			p366: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p367: React_Smash_Shallow{ball=5} -> Ply2_mid_smash_shallow
			p368: React_Lob_Shallow{ball=5} -> Ply2_mid_lob_shallow
			p369: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p370: React_Smash_Deep{ball=5} -> Ply2_mid_smash_deep
			p371: React_Lob_Deep{ball=5} -> Ply2_mid_lob_deep
	};

Ply2_ad_regular_shallow_handler = pcase{
			p372: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p373: React_Smash_Shallow{ball=4} -> Ply2_ad_smash_shallow
			p374: React_Lob_Shallow{ball=4} -> Ply2_ad_lob_shallow
			p375: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p376: React_Smash_Deep{ball=4} -> Ply2_ad_smash_deep
			p377: React_Lob_Deep{ball=4} -> Ply2_ad_lob_deep
	};

Ply2_ad_smash_shallow_handler = pcase{
			p378: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p379: React_Smash_Shallow{ball=4} -> Ply2_ad_smash_shallow
			p380: React_Lob_Shallow{ball=4} -> Ply2_ad_lob_shallow
			p381: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p382: React_Smash_Deep{ball=4} -> Ply2_ad_smash_deep
			p383: React_Lob_Deep{ball=4} -> Ply2_ad_lob_deep
	};

Ply2_ad_lob_shallow_handler = pcase{
			p384: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p385: React_Smash_Shallow{ball=4} -> Ply2_ad_smash_shallow
			p386: React_Lob_Shallow{ball=4} -> Ply2_ad_lob_shallow
			p387: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p388: React_Smash_Deep{ball=4} -> Ply2_ad_smash_deep
			p389: React_Lob_Deep{ball=4} -> Ply2_ad_lob_deep
	};

// deep handlers
Ply2_de_regular_deep_handler = pcase{
			p390: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p391: React_Smash_Shallow{ball=6} -> Ply2_de_smash_shallow
			p392: React_Lob_Shallow{ball=6} -> Ply2_de_lob_shallow
			p393: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p394: React_Smash_Deep{ball=6} -> Ply2_de_smash_deep
			p395: React_Lob_Deep{ball=6} -> Ply2_de_lob_deep
	};

Ply2_de_smash_deep_handler = pcase{
			p396: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p397: React_Smash_Shallow{ball=6} -> Ply2_de_smash_shallow
			p398: React_Lob_Shallow{ball=6} -> Ply2_de_lob_shallow
			p399: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p400: React_Smash_Deep{ball=6} -> Ply2_de_smash_deep
			p401: React_Lob_Deep{ball=6} -> Ply2_de_lob_deep
	};

Ply2_de_lob_deep_handler = pcase{
			p402: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p403: React_Smash_Shallow{ball=6} -> Ply2_de_smash_shallow
			p404: React_Lob_Shallow{ball=6} -> Ply2_de_lob_shallow
			p405: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p406: React_Smash_Deep{ball=6} -> Ply2_de_smash_deep
			p407: React_Lob_Deep{ball=6} -> Ply2_de_lob_deep
	};

Ply2_mid_regular_deep_handler = pcase{
			p408: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p409: React_Smash_Shallow{ball=5} -> Ply2_mid_smash_shallow
			p410: React_Lob_Shallow{ball=5} -> Ply2_mid_lob_shallow
			p411: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p412: React_Smash_Deep{ball=5} -> Ply2_mid_smash_deep
			p413: React_Lob_Deep{ball=5} -> Ply2_mid_lob_deep
	};

Ply2_mid_smash_deep_handler = pcase{
			p414: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p415: React_Smash_Shallow{ball=5} -> Ply2_mid_smash_shallow
			p416: React_Lob_Shallow{ball=5} -> Ply2_mid_lob_shallow
			p417: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p418: React_Smash_Deep{ball=5} -> Ply2_mid_smash_deep
			p419: React_Lob_Deep{ball=5} -> Ply2_mid_lob_deepp
	};

Ply2_mid_lob_deep_handler = pcase{
			p420: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p421: React_Smash_Shallow{ball=5} -> Ply2_mid_smash_shallow
			p422: React_Lob_Shallow{ball=5} -> Ply2_mid_lob_shallow
			p423: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p424: React_Smash_Deep{ball=5} -> Ply2_mid_smash_deep
			p425: React_Lob_Deep{ball=5} -> Ply2_mid_lob_deep
	};

Ply2_ad_regular_deep_handler = pcase{
			p426: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p427: React_Smash_Shallow{ball=4} -> Ply2_ad_smash_shallow
			p428: React_Lob_Shallow{ball=4} -> Ply2_ad_lob_shallow
			p429: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p430: React_Smash_Deep{ball=4} -> Ply2_ad_smash_deep
			p431: React_Lob_Deep{ball=4} -> Ply2_ad_lob_deep
	};

Ply2_ad_smash_deep_handler = pcase{
			p432: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p433: React_Smash_Shallow{ball=4} -> Ply2_ad_smash_shallow
			p434: React_Lob_Shallow{ball=4} -> Ply2_ad_lob_shallow
			p435: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p436: React_Smash_Deep{ball=4} -> Ply2_ad_smash_deep
			p437: React_Lob_Deep{ball=4} -> Ply2_ad_lob_deep
	};

Ply2_ad_lob_deep_handler = pcase{
			p438: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p439: React_Smash_Shallow{ball=4} -> Ply2_ad_smash_shallow
			p440: React_Lob_Shallow{ball=4} -> Ply2_ad_lob_shallow
			p441: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p442: React_Smash_Deep{ball=4} -> Ply2_ad_smash_deep
			p443: React_Lob_Deep{ball=4} -> Ply2_ad_lob_deep
	};

// deuce regular is when player2 hit position is 6
Ply2_de_regular_shallow = pcase { // if already 
			p444: FH_InsideOut {ball = 1} -> Ply1_de_regular_shallow_handler
			p445: FH_insideIn {ball = 3} -> Ply1_ad_regular_shallow_handler
			p446: FH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p447: BH_Crosscourt {ball = 1} -> Ply1_de_regular_shallow_handler
			p448: BH_Downline {ball = 3} -> Ply1_ad_regular_shallow_handler
			p449: BH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p450: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p451: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid regular is when player2 hit position is 5
Ply2_mid_regular_shallow = noMove -> pcase{
			p452: FH_InsideOut {ball = 1} -> Ply1_de_regular_shallow_handler
			p453: FH_Crosscourt{ball = 3} -> Ply1_ad_regular_shallow_handler
			p454: FH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p455: BH_InsideOut {ball = 3} -> Ply1_ad_regular_shallow_handler
			p456: BH_Crosscourt {ball = 1} -> Ply1_de_regular_shallow_handler
			p457: BH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p458: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p459: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad regular is when player 2 hit position is 4
Ply2_ad_regular_shallow = pcase{
			p460: FH_Crosscourt {ball = 3} -> Ply1_ad_regular_shallow_handler
			p461: FH_Downline {ball = 1} -> Ply1_de_regular_shallow_handler
			p462: FH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p463: BH_InsideIn {ball = 1} -> Ply1_de_regular_shallow_handler
			p464: BH_InsideOut {ball = 3} -> Ply1_ad_regular_shallow_handler
			p465: BH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p466: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p467: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};    

// smashes

// deuce regular is when player2 hit position is 6
Ply2_de_smash_shallow = pcase { // if already 
			p468: FH_InsideOut {ball = 1} -> Ply1_de_smash_shallow_handler
			p469: FH_insideIn {ball = 3} -> Ply1_ad_smash_shallow_handler
			p470: FH_DownMid {ball = 2} -> Ply1_mid_smash_shallow_handler
			p471: BH_Crosscourt {ball = 1} -> Ply1_de_smash_shallow_handler
			p472: BH_Downline {ball = 3} -> Ply1_ad_smash_shallow_handler
			p473: BH_DownMid {ball = 2} -> Ply1_mid_smash_shallow_handler
			p474: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p475: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid regular is when player2 hit position is 5
Ply2_mid_smash_shallow = noMove -> pcase{
			p476: FH_InsideOut {ball = 1} -> Ply1_de_smash_shallow_handler
			p477: FH_Crosscourt{ball = 3} -> Ply1_ad_smash_shallow_handler
			p478: FH_DownMid {ball = 2} -> Ply1_mid_smash_shallow_handler
			p479: BH_InsideOut {ball = 3} -> Ply1_ad_smash_shallow_handler
			p480: BH_Crosscourt {ball = 1} -> Ply1_de_smash_shallow_handler
			p481: BH_DownMid {ball = 2} -> Ply1_mid_smash_shallow_handler
			p482: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p483: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad regular is when player 2 hit position is 4
Ply2_ad_smash_shallow = pcase{
			p484: FH_Crosscourt {ball = 3} -> Ply1_ad_smash_shallow_handler
			p485: FH_Downline {ball = 1} -> Ply1_de_smash_shallow_handler
			p486: FH_DownMid {ball = 2} -> Ply1_mid_smash_shallow_handler
			p487: BH_InsideIn {ball = 1} -> Ply1_de_smash_shallow_handler
			p488: BH_InsideOut {ball = 3} -> Ply1_ad_smash_shallow_handler
			p489: BH_DownMid {ball = 2} -> Ply1_mid_smash_shallow_handler
			p490: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p491: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// lobs

// deuce regular is when player2 hit position is 6
Ply2_de_lob_shallow = pcase { // if already 
			p492: FH_InsideOut {ball = 1} -> Ply1_de_lob_shallow_handler
			p493: FH_insideIn {ball = 3} -> Ply1_ad_lob_shallow_handler
			p494: FH_DownMid {ball = 2} -> Ply1_mid_lob_shallow_handler
			p495: BH_Crosscourt {ball = 1} -> Ply1_de_lob_shallow_handler
			p496: BH_Downline {ball = 3} -> Ply1_ad_lob_shallow_handler
			p497: BH_DownMid {ball = 2} -> Ply1_mid_lob_shallow_handler
			p498: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p499: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid regular is when player2 hit position is 5
Ply2_mid_lob_shallow = noMove -> pcase{
			p500: FH_InsideOut {ball = 1} -> Ply1_de_lob_shallow_handler
			p501: FH_Crosscourt{ball = 3} -> Ply1_ad_lob_shallow_handler
			p502: FH_DownMid {ball = 2} -> Ply1_mid_lob_shallow_handler
			p503: BH_InsideOut {ball = 3} -> Ply1_ad_lob_shallow_handler
			p504: BH_Crosscourt {ball = 1} -> Ply1_de_lob_shallow_handler
			p505: BH_DownMid {ball = 2} -> Ply1_mid_lob_shallow_handler
			p506: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p507: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad regular is when player 2 hit position is 4
Ply2_ad_lob_shallow = pcase{
			p508: FH_Crosscourt {ball = 3} -> Ply1_ad_lob_shallow_handler
			p509: FH_Downline {ball = 1} -> Ply1_de_lob_shallow_handler
			p510: FH_DownMid {ball = 2} -> Ply1_mid_lob_shallow_handler
			p511: BH_InsideIn {ball = 1} -> Ply1_de_lob_shallow_handler
			p512: BH_InsideOut {ball = 3} -> Ply1_ad_lob_shallow_handler
			p513: BH_DownMid {ball = 2} -> Ply1_mid_lob_shallow_handler
			p514: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p515: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	}; 
// deep actions

// deuce regular is when player2 hit position is 6
Ply2_de_regular_deep = pcase { // if already 
	p516: FH_InsideOut {ball = 1} -> Ply1_de_regular_deep_handler
	p517: FH_insideIn {ball = 3} -> Ply1_ad_regular_deep_handler
	p518: FH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p519: BH_Crosscourt {ball = 1} -> Ply1_de_regular_deep_handler
	p520: BH_Downline {ball = 3} -> Ply1_ad_regular_deep_handler
	p521: BH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p522: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p523: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// mid regular is when player2 hit position is 5
Ply2_mid_regular_deep = noMove -> pcase{
	p524: FH_InsideOut {ball = 1} -> Ply1_de_regular_deep_handler
	p525: FH_Crosscourt{ball = 3} -> Ply1_ad_regular_deep_handler
	p526: FH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p527: BH_InsideOut {ball = 3} -> Ply1_ad_regular_deep_handler
	p528: BH_Crosscourt {ball = 1} -> Ply1_de_regular_deep_handler
	p529: BH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p530: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p531: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// ad regular is when player 2 hit position is 4
Ply2_ad_regular_deep = pcase{
	p532: FH_Crosscourt {ball = 3} -> Ply1_ad_regular_deep_handler
	p533: FH_Downline {ball = 1} -> Ply1_de_regular_deep_handler
	p534: FH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p535: BH_InsideIn {ball = 1} -> Ply1_de_regular_deep_handler
	p536: BH_InsideOut {ball = 3} -> Ply1_ad_regular_deep_handler
	p537: BH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p538: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p539: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};    

// smashes

// deuce regular is when player2 hit position is 6
Ply2_de_smash_deep = pcase { // if already 
	p540: FH_InsideOut {ball = 1} -> Ply1_de_smash_deep_handler
	p541: FH_insideIn {ball = 3} -> Ply1_ad_smash_deep_handler
	p542: FH_DownMid {ball = 2} -> Ply1_mid_smash_deep_handler
	p543: BH_Crosscourt {ball = 1} -> Ply1_de_smash_deep_handler
	p544: BH_Downline {ball = 3} -> Ply1_ad_smash_deep_handler
	p545: BH_DownMid {ball = 2} -> Ply1_mid_smash_deep_handler
	p546: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p547: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// mid regular is when player2 hit position is 5
Ply2_mid_smash_deep = noMove -> pcase{
	p548: FH_InsideOut {ball = 1} -> Ply1_de_smash_deep_handler
	p549: FH_Crosscourt{ball = 3} -> Ply1_ad_smash_deep_handler
	p550: FH_DownMid {ball = 2} -> Ply1_mid_smash_deep_handler
	p551: BH_InsideOut {ball = 3} -> Ply1_ad_smash_deep_handler
	p552: BH_Crosscourt {ball = 1} -> Ply1_de_smash_deep_handler
	p553: BH_DownMid {ball = 2} -> Ply1_mid_smash_deep_handler
	p554: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p555: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// ad regular is when player 2 hit position is 4
Ply2_ad_smash_deep = pcase{
	p556: FH_Crosscourt {ball = 3} -> Ply1_ad_smash_deep_handler
	p557: FH_Downline {ball = 1} -> Ply1_de_smash_deep_handler
	p558: FH_DownMid {ball = 2} -> Ply1_mid_smash_deep_handler
	p559: BH_InsideIn {ball = 1} -> Ply1_de_smash_deep_handler
	p560: BH_InsideOut {ball = 3} -> Ply1_ad_smash_deep_handler
	p561: BH_DownMid {ball = 2} -> Ply1_mid_smash_deep_handler
	p562: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p563: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// lobs

// deuce regular is when player2 hit position is 6
Ply2_de_lob_deep = pcase { // if already 
	p564: FH_InsideOut {ball = 1} -> Ply1_de_lob_deep_handler
	p565: FH_insideIn {ball = 3} -> Ply1_ad_lob_deep_handler
	p566: FH_DownMid {ball = 2} -> Ply1_mid_lob_deep_handler
	p567: BH_Crosscourt {ball = 1} -> Ply1_de_lob_deep_handler
	p568: BH_Downline {ball = 3} -> Ply1_ad_lob_deep_handler
	p569: BH_DownMid {ball = 2} -> Ply1_mid_lob_deep_handler
	p570: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p571: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// mid regular is when player2 hit position is 5
Ply2_mid_lob_deep = noMove -> pcase{
	p572: FH_InsideOut {ball = 1} -> Ply1_de_lob_deep_handler
	p573: FH_Crosscourt{ball = 3} -> Ply1_ad_lob_deep_handler
	p574: FH_DownMid {ball = 2} -> Ply1_mid_lob_deep_handler
	p575: BH_InsideOut {ball = 3} -> Ply1_ad_lob_deep_handler
	p576: BH_Crosscourt {ball = 1} -> Ply1_de_lob_deep_handler
	p577: BH_DownMid {ball = 2} -> Ply1_mid_lob_deep_handler
	p578: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p579: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// ad regular is when player 2 hit position is 4
Ply2_ad_lob_deep = pcase{
	p580: FH_Crosscourt {ball = 3} -> Ply1_ad_lob_deep_handler
	p581: FH_Downline {ball = 1} -> Ply1_de_lob_deep_handler
	p582: FH_DownMid {ball = 2} -> Ply1_mid_lob_deep_handler
	p583: BH_InsideIn {ball = 1} -> Ply1_de_lob_deep_handler
	p584: BH_InsideOut {ball = 3} -> Ply1_ad_lob_deep_handler
	p585: BH_DownMid {ball = 2} -> Ply1_mid_lob_deep_handler
	p586: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p587: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
}; 

#define player1Win won == player1;
#assert TieBreakGame reaches player1Win with prob;