TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);
WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;
Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

De_Ply1Serve = pcase {                             
			p0: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p1: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p2: ServeWide_in{ball=6} -> Ply2_BackHandR 
			p3: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p4: Serve_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			p5: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p6: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p7: ServeWide_in{ball=6} -> Ply2_BackHandR 
			p8: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p9: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply1Serve = pcase {
			p10: ServeT_in{ball=5} -> Ply2_BackHandR  
			p11: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p12: ServeWide_in{ball=4} -> Ply2_ForeHandR
			p13: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p14: Serve_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			p15: ServeT_in{ball=5} -> Ply2_BackHandR  
			p16: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p17: ServeWide_in{ball=4} -> Ply2_ForeHandR
			p18: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p19: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };    
     		 
Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			p20: FH_CrossCourt{ball=6} -> Ply2_de_regular_deep_handler
			p21: FH_DownLine{ball=4} -> Ply2_ad_regular_deep_handler
			p22: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p23: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p24: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p25: FH_InsideOut{ball =4} -> Ply2_ad_regular_deep_handler
			p26: FH_InsideIn{ball=6} -> Ply2_de_regular_deep_handler
			p27: FH_CrossCourt{ball=6} -> Ply2_de_regular_deep_handler
			p28: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p29: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p30: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			p31: BH_CrossCourt{ball=4} -> Ply2_ad_regular_deep_handler
			p32: BH_InsideIn{ball=4} -> Ply2_ad_regular_deep_handler
			p33: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p34: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p35: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p36: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p37: BH_CrossCourt{ball=4} -> Ply2_ad_regular_deep_handler
			p38: BH_DownLine{ball=6} -> Ply2_de_regular_deep_handler
			p39: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p40: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p41: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

// handlers
Ply1_de_regular_shallow_handler = pcase{
			p42: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p43: React_Slice_Shallow{ball=1} -> Ply1_de_slice_shallow
			p44: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p45: React_Slice_Deep{ball=1} -> Ply1_de_slice_deep
	};

Ply1_de_slice_shallow_handler = pcase{
			p46: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p47: React_Slice_Shallow{ball=1} -> Ply1_de_slice_shallow
			p48: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p49: React_Slice_Deep{ball=1} -> Ply1_de_slice_deep
	};

Ply1_mid_regular_shallow_handler = pcase{
			p50: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p51: React_Slice_Shallow{ball=2} -> Ply1_mid_slice_shallow
			p52: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p53: React_Slice_Deep{ball=2} -> Ply1_mid_slice_deep
	};

Ply1_mid_slice_shallow_handler = pcase{
			p54: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p55: React_Slice_Shallow{ball=2} -> Ply1_mid_slice_shallow
			p56: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p57: React_Slice_Deep{ball=2} -> Ply1_mid_slice_deep
	};

Ply1_ad_regular_shallow_handler = pcase{
			p58: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p59: React_Slice_Shallow{ball=3} -> Ply1_ad_slice_shallow
			p60: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p61: React_Slice_Deep{ball=3} -> Ply1_ad_slice_deep
	};

Ply1_ad_slice_shallow_handler = pcase{
			p62: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p63: React_Slice_Shallow{ball=3} -> Ply1_ad_slice_shallow
			p64: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p65: React_Slice_Deep{ball=3} -> Ply1_ad_slice_deep
	};

// deep handlers
Ply1_de_regular_deep_handler = pcase{
			p66: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p67: React_Slice_Shallow{ball=1} -> Ply1_de_slice_shallow
			p68: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p69: React_Slice_Deep{ball=1} -> Ply1_de_slice_deep
	};

Ply1_de_slice_deep_handler = pcase{
			p70: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p71: React_Slice_Shallow{ball=1} -> Ply1_de_slice_shallow
			p72: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p73: React_Slice_Deep{ball=1} -> Ply1_de_slice_deep
	};

Ply1_mid_regular_deep_handler = pcase{
			p74: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p75: React_Slice_Shallow{ball=2} -> Ply1_mid_slice_shallow
			p76: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p77: React_Slice_Deep{ball=2} -> Ply1_mid_slice_deep
	};

Ply1_mid_slice_deep_handler = pcase{
			p78: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p79: React_Slice_Shallow{ball=2} -> Ply1_mid_slice_shallow
			p80: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p81: React_Slice_Deep{ball=2} -> Ply1_mid_slice_deep
	};

Ply1_ad_regular_deep_handler = pcase{
			p82: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p83: React_Slice_Shallow{ball=3} -> Ply1_ad_slice_shallow
			p84: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p85: React_Slice_Deep{ball=3} -> Ply1_ad_slice_deep
	};

Ply1_ad_slice_deep_handler = pcase{
			p86: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p87: React_Slice_Shallow{ball=3} -> Ply1_ad_slice_shallow
			p88: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p89: React_Slice_Deep{ball=3} -> Ply1_ad_slice_deep
	};

// shallow actions

// deuce stroke is when player1 hit position is 1
Ply1_de_regular_shallow = pcase{
			p90: FH_Crosscourt{ball=6} -> Ply2_de_regular_shallow_handler
			p91: FH_Downline{ball=4} -> Ply2_ad_regular_shallow_handler
			p92: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p93: BH_InsideIn{ball=4} -> Ply2_ad_regular_shallow_handler
			p94: BH_InsideOut{ball=6} -> Ply2_de_regular_shallow_handler
			p95: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p96: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p97: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_regular_shallow = pcase{
			p98: FH_InsideOut{ball=4} -> Ply2_ad_regular_shallow_handler
			p99: FH_Crosscourt{ball=6} -> Ply2_de_regular_shallow_handler
			p100: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p101: BH_InsideOut{ball=6} -> Ply2_de_regular_shallow_handler
			p102: BH_Crosscourt{ball=4} -> Ply2_ad_regular_shallow_handler
			p103: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p104: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p105: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_regular_shallow = pcase{
			p106: FH_InsideOut{ball=4} -> Ply2_ad_regular_shallow_handler
			p107: FH_InsideIn{ball=6} -> Ply2_de_regular_shallow_handler
			p108: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p109: BH_Crosscourt{ball=4} -> Ply2_ad_regular_shallow_handler
			p110: BH_Downline{ball=6} -> Ply2_de_regular_shallow_handler
			p111: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p112: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p113: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};


// slices

// deuce stroke is when player1 hit position is 1
Ply1_de_slice_shallow = pcase{
			p114: FH_Crosscourt{ball=6} -> Ply2_de_slice_shallow_handler
			p115: FH_Downline{ball=4} -> Ply2_ad_slice_shallow_handler
			p116: FH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p117: BH_InsideIn{ball=4} -> Ply2_ad_slice_shallow_handler
			p118: BH_InsideOut{ball=6} -> Ply2_de_slice_shallow_handler
			p119: BH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p120: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p121: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_slice_shallow = pcase{
			p122: FH_InsideOut{ball=4} -> Ply2_ad_slice_shallow_handler
			p123: FH_Crosscourt{ball=6} -> Ply2_de_slice_shallow_handler
			p124: FH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p125: BH_InsideOut{ball=6} -> Ply2_de_slice_shallow_handler
			p126: BH_Crosscourt{ball=4} -> Ply2_ad_slice_shallow_handler
			p127: BH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p128: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p129: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_slice_shallow = pcase{
			p130: FH_InsideOut{ball=4} -> Ply2_ad_slice_shallow_handler
			p131: FH_InsideIn{ball=6} -> Ply2_de_slice_shallow_handler
			p132: FH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p133: BH_Crosscourt{ball=4} -> Ply2_ad_slice_shallow_handler
			p134: BH_Downline{ball=6} -> Ply2_de_slice_shallow_handler
			p135: BH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p136: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p137: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// deep actions

// deuce stroke is when player1 hit position is 1
Ply1_de_regular_deep = pcase{
			p138: FH_Crosscourt{ball=6} -> Ply2_de_regular_deep_handler
			p139: FH_Downline{ball=4} -> Ply2_ad_regular_deep_handler
			p140: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p141: BH_InsideIn{ball=4} -> Ply2_ad_regular_deep_handler
			p142: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p143: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p144: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p145: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_regular_deep = pcase{
			p146: FH_InsideOut{ball=4} -> Ply2_ad_regular_deep_handler
			p147: FH_Crosscourt{ball=6} -> Ply2_de_regular_deep_handler
			p148: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p149: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p150: BH_Crosscourt{ball=4} -> Ply2_ad_regular_deep_handler
			p151: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p152: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p153: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_regular_deep = pcase{
			p154: FH_InsideOut{ball=4} -> Ply2_ad_regular_deep_handler
			p155: FH_InsideIn{ball=6} -> Ply2_de_regular_deep_handler
			p156: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p157: BH_Crosscourt{ball=4} -> Ply2_ad_regular_deep_handler
			p158: BH_Downline{ball=6} -> Ply2_de_regular_deep_handler
			p159: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p160: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p161: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// slices

// deuce stroke is when player1 hit position is 1
Ply1_de_slice_deep = pcase{
			p162: FH_Crosscourt{ball=6} -> Ply2_de_slice_deep_handler
			p163: FH_Downline{ball=4} -> Ply2_ad_slice_deep_handler
			p164: FH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p165: BH_InsideIn{ball=4} -> Ply2_ad_slice_deep_handler
			p166: BH_InsideOut{ball=6} -> Ply2_de_slice_deep_handler
			p167: BH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p168: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p169: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_slice_deep = pcase{
			p170: FH_InsideOut{ball=4} -> Ply2_ad_slice_deep_handler
			p171: FH_Crosscourt{ball=6} -> Ply2_de_slice_deep_handler
			p172: FH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p173: BH_InsideOut{ball=6} -> Ply2_de_slice_deep_handler
			p174: BH_Crosscourt{ball=4} -> Ply2_ad_slice_deep_handler
			p175: BH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p176: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p177: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_slice_deep = pcase{
			p178: FH_InsideOut{ball=4} -> Ply2_ad_slice_deep_handler
			p179: FH_InsideIn{ball=6} -> Ply2_de_slice_deep_handler
			p180: FH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p181: BH_Crosscourt{ball=4} -> Ply2_ad_slice_deep_handler
			p182: BH_Downline{ball=6} -> Ply2_de_slice_deep_handler
			p183: BH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p184: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p185: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

De_Ply2Serve = pcase {
			p186: ServeT_in{ball=2} -> Ply1_BackHandR
			p187: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p188: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p189: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p190: Serve_err{ball=9} -> De_Ply2Serve_2nd}; 

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			p191: ServeT_in{ball=2} -> Ply1_BackHandR
			p192: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p193: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p194: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p195: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ad_Ply2Serve = pcase {
			p196: ServeT_in{ball=2} -> Ply1_ForeHandR
			p197: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p198: ServeWide_in{ball=3} -> Ply1_BackHandR
			p199: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p200: Serve_err{ball=9} -> Ad_Ply2Serve_2nd}; 

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			p201: ServeT_in{ball=2} -> Ply1_ForeHandR
			p202: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p203: ServeWide_in{ball=3} -> Ply1_BackHandR
			p204: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p205: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			p206: FH_InsideOut{ball = 1} -> Ply1_de_regular_deep_handler
			p207: FH_InsideIn{ball = 3} -> Ply1_ad_regular_deep_handler
			p208: FH_CrossCourt{ball = 3} -> Ply1_ad_regular_deep_handler
			p209: FH_DownMid{ball = 2} -> Ply1_mid_regular_deep_handler
			p210: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p211: FH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
      			p212: FH_CrossCourt{ ball = 3} -> Ply1_ad_regular_deep_handler
			p213: FH_DownLine{ball = 1} -> Ply1_de_regular_deep_handler
			p214: FH_DownMid{ ball = 2} -> Ply1_mid_regular_deep_handler
			p215: FH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p216: FH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};
      		 
Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
			pcase {
			p217: BH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p218: BH_DownLine{ball = 3} -> Ply1_ad_regular_deep_handler
			p219: BH_DownMid{ball = 2} -> Ply1_mid_regular_deep_handler
			p220: BH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                      else { turn = (turn+1)%4} }-> NextPt
			p221: BH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p222: BH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p223: BH_InsideIn{ball = 1} -> Ply1_de_regular_deep_handler
			p224: BH_InsideOut{ball = 3} -> Ply1_ad_regular_deep_handler
			p225: BH_DownMid{ball = 2} -> Ply1_mid_regular_deep_handler
			p226: BH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p227: BH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt			
      		 }};

// handlers
Ply2_de_regular_shallow_handler = pcase{
			p228: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p229: React_Slice_Shallow{ball=6} -> Ply2_de_slice_shallow
			p230: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p231: React_Slice_Deep{ball=6} -> Ply2_de_slice_deep
	};

Ply2_de_slice_shallow_handler = pcase{
			p232: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p233: React_Slice_Shallow{ball=6} -> Ply2_de_slice_shallow
			p234: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p235: React_Slice_Deep{ball=6} -> Ply2_de_slice_deep
	};

Ply2_mid_regular_shallow_handler = pcase{
			p236: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p237: React_Slice_Shallow{ball=5} -> Ply2_mid_slice_shallow
			p238: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p239: React_Slice_Deep{ball=5} -> Ply2_mid_slice_deep
	};

Ply2_mid_slice_shallow_handler = pcase{
			p240: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p241: React_Slice_Shallow{ball=5} -> Ply2_mid_slice_shallow
			p242: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p243: React_Slice_Deep{ball=5} -> Ply2_mid_slice_deep
	};

Ply2_ad_regular_shallow_handler = pcase{
			p244: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p245: React_Slice_Shallow{ball=4} -> Ply2_ad_slice_shallow
			p246: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p247: React_Slice_Deep{ball=4} -> Ply2_ad_slice_deep
	};

Ply2_ad_slice_shallow_handler = pcase{
			p248: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p249: React_Slice_Shallow{ball=4} -> Ply2_ad_slice_shallow
			p250: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p251: React_Slice_Deep{ball=4} -> Ply2_ad_slice_deep
	};

// deep handlers
Ply2_de_regular_deep_handler = pcase{
			p252: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p253: React_Slice_Shallow{ball=6} -> Ply2_de_slice_shallow
			p254: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p255: React_Slice_Deep{ball=6} -> Ply2_de_slice_deep
	};

Ply2_de_slice_deep_handler = pcase{
			p256: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p257: React_Slice_Shallow{ball=6} -> Ply2_de_slice_shallow
			p258: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p259: React_Slice_Deep{ball=6} -> Ply2_de_slice_deep
	};

Ply2_mid_regular_deep_handler = pcase{
			p260: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p261: React_Slice_Shallow{ball=5} -> Ply2_mid_slice_shallow
			p262: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p263: React_Slice_Deep{ball=5} -> Ply2_mid_slice_deep
	};

Ply2_mid_slice_deep_handler = pcase{
			p264: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p265: React_Slice_Shallow{ball=5} -> Ply2_mid_slice_shallow
			p266: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p267: React_Slice_Deep{ball=5} -> Ply2_mid_slice_deep
	};

Ply2_ad_regular_deep_handler = pcase{
			p268: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p269: React_Slice_Shallow{ball=4} -> Ply2_ad_slice_shallow
			p270: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p271: React_Slice_Deep{ball=4} -> Ply2_ad_slice_deep
	};

Ply2_ad_slice_deep_handler = pcase{
			p272: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p273: React_Slice_Shallow{ball=4} -> Ply2_ad_slice_shallow
			p274: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p275: React_Slice_Deep{ball=4} -> Ply2_ad_slice_deep
	};

// deuce stroke is when player2 hit position is 6
Ply2_de_regular_shallow = pcase { // if already 
			p276: FH_InsideOut {ball = 1} -> Ply1_de_regular_shallow_handler
			p277: FH_insideIn {ball = 3} -> Ply1_ad_regular_shallow_handler
			p278: FH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p279: BH_Crosscourt {ball = 1} -> Ply1_de_regular_shallow_handler
			p280: BH_Downline {ball = 3} -> Ply1_ad_regular_shallow_handler
			p281: BH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p282: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p283: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid stroke is when player2 hit position is 5
Ply2_mid_regular_shallow = noMove -> pcase{
			p284: FH_InsideOut {ball = 1} -> Ply1_de_regular_shallow_handler
			p285: FH_Crosscourt{ball = 3} -> Ply1_ad_regular_shallow_handler
			p286: FH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p287: BH_InsideOut {ball = 3} -> Ply1_ad_regular_shallow_handler
			p288: BH_Crosscourt {ball = 1} -> Ply1_de_regular_shallow_handler
			p289: BH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p290: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p291: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_regular_shallow = pcase{
			p292: FH_Crosscourt {ball = 3} -> Ply1_ad_regular_shallow_handler
			p293: FH_Downline {ball = 1} -> Ply1_de_regular_shallow_handler
			p294: FH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p295: BH_InsideIn {ball = 1} -> Ply1_de_regular_shallow_handler
			p296: BH_InsideOut {ball = 3} -> Ply1_ad_regular_shallow_handler
			p297: BH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p298: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p299: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// slices

// deuce stroke is when player2 hit position is 6
Ply2_de_slice_shallow = pcase { // if already 
			p300: FH_InsideOut {ball = 1} -> Ply1_de_slice_shallow_handler
			p301: FH_insideIn {ball = 3} -> Ply1_ad_slice_shallow_handler
			p302: FH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p303: BH_Crosscourt {ball = 1} -> Ply1_de_slice_shallow_handler
			p304: BH_Downline {ball = 3} -> Ply1_ad_slice_shallow_handler
			p305: BH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p306: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p307: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid stroke is when player2 hit position is 5
Ply2_mid_slice_shallow = noMove -> pcase{
			p308: FH_InsideOut {ball = 1} -> Ply1_de_slice_shallow_handler
			p309: FH_Crosscourt{ball = 3} -> Ply1_ad_slice_shallow_handler
			p310: FH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p311: BH_InsideOut {ball = 3} -> Ply1_ad_slice_shallow_handler
			p312: BH_Crosscourt {ball = 1} -> Ply1_de_slice_shallow_handler
			p313: BH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p314: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p315: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_slice_shallow = pcase{
			p316: FH_Crosscourt {ball = 3} -> Ply1_ad_slice_shallow_handler
			p317: FH_Downline {ball = 1} -> Ply1_de_slice_shallow_handler
			p318: FH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p319: BH_InsideIn {ball = 1} -> Ply1_de_slice_shallow_handler
			p320: BH_InsideOut {ball = 3} -> Ply1_ad_slice_shallow_handler
			p321: BH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p322: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p323: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	}; 

// deep actions

// deuce stroke is when player2 hit position is 6
Ply2_de_regular_deep = pcase { // if already 
	p324: FH_InsideOut {ball = 1} -> Ply1_de_regular_deep_handler
	p325: FH_insideIn {ball = 3} -> Ply1_ad_regular_deep_handler
	p326: FH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p327: BH_Crosscourt {ball = 1} -> Ply1_de_regular_deep_handler
	p328: BH_Downline {ball = 3} -> Ply1_ad_regular_deep_handler
	p329: BH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p330: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p331: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// mid stroke is when player2 hit position is 5
Ply2_mid_regular_deep = noMove -> pcase{
	p332: FH_InsideOut {ball = 1} -> Ply1_de_regular_deep_handler
	p333: FH_Crosscourt{ball = 3} -> Ply1_ad_regular_deep_handler
	p334: FH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p335: BH_InsideOut {ball = 3} -> Ply1_ad_regular_deep_handler
	p336: BH_Crosscourt {ball = 1} -> Ply1_de_regular_deep_handler
	p337: BH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p338: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p339: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// ad stroke is when player 2 hit position is 4
Ply2_ad_regular_deep = pcase{
	p340: FH_Crosscourt {ball = 3} -> Ply1_ad_regular_deep_handler
	p341: FH_Downline {ball = 1} -> Ply1_de_regular_deep_handler
	p342: FH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p343: BH_InsideIn {ball = 1} -> Ply1_de_regular_deep_handler
	p344: BH_InsideOut {ball = 3} -> Ply1_ad_regular_deep_handler
	p345: BH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p346: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p347: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};    

// slices

// deuce stroke is when player2 hit position is 6
Ply2_de_slice_deep = pcase { // if already 
	p348: FH_InsideOut {ball = 1} -> Ply1_de_slice_deep_handler
	p349: FH_insideIn {ball = 3} -> Ply1_ad_slice_deep_handler
	p350: FH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p351: BH_Crosscourt {ball = 1} -> Ply1_de_slice_deep_handler
	p352: BH_Downline {ball = 3} -> Ply1_ad_slice_deep_handler
	p353: BH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p354: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p355: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// mid stroke is when player2 hit position is 5
Ply2_mid_slice_deep = noMove -> pcase{
	p356: FH_InsideOut {ball = 1} -> Ply1_de_slice_deep_handler
	p357: FH_Crosscourt{ball = 3} -> Ply1_ad_slice_deep_handler
	p358: FH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p359: BH_InsideOut {ball = 3} -> Ply1_ad_slice_deep_handler
	p360: BH_Crosscourt {ball = 1} -> Ply1_de_slice_deep_handler
	p361: BH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p362: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p363: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// ad stroke is when player 2 hit position is 4
Ply2_ad_slice_deep = pcase{
	p364: FH_Crosscourt {ball = 3} -> Ply1_ad_slice_deep_handler
	p365: FH_Downline {ball = 1} -> Ply1_de_slice_deep_handler
	p366: FH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p367: BH_InsideIn {ball = 1} -> Ply1_de_slice_deep_handler
	p368: BH_InsideOut {ball = 3} -> Ply1_ad_slice_deep_handler
	p369: BH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p370: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p371: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
}; 

#define player1Win won == player1;
#assert TieBreakGame reaches player1Win with prob;