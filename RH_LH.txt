TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);
WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;
Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

De_Ply1Serve = pcase {                             
			p0: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p1: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p2: ServeWide_in{ball=6} -> Ply2_BackHandR 
			p3: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p4: Serve_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			p5: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p6: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p7: ServeWide_in{ball=6} -> Ply2_BackHandR 
			p8: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p9: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply1Serve = pcase {
			p10: ServeT_in{ball=5} -> Ply2_BackHandR  
			p11: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p12: ServeWide_in{ball=4} -> Ply2_ForeHandR
			p13: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p14: Serve_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			p15: ServeT_in{ball=5} -> Ply2_BackHandR  
			p16: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p17: ServeWide_in{ball=4} -> Ply2_ForeHandR
			p18: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p19: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };    
     		 
Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			p20: FH_CrossCourt{ball=6} -> Ply2_de_regular_deep_handler
			p21: FH_DownLine{ball=4} -> Ply2_ad_regular_deep_handler
			p22: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p23: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p24: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p25: FH_InsideOut{ball =4} -> Ply2_ad_regular_deep_handler
			p26: FH_InsideIn{ball=6} -> Ply2_de_regular_deep_handler
			p27: FH_CrossCourt{ball=6} -> Ply2_de_regular_deep_handler
			p28: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p29: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p30: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			p31: BH_CrossCourt{ball=4} -> Ply2_ad_regular_deep_handler
			p32: BH_InsideIn{ball=4} -> Ply2_ad_regular_deep_handler
			p33: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p34: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p35: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p36: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p37: BH_CrossCourt{ball=4} -> Ply2_ad_regular_deep_handler
			p38: BH_DownLine{ball=6} -> Ply2_de_regular_deep_handler
			p39: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p40: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p41: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

// handlers
Ply1_de_regular_shallow_handler = pcase{
			p42: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p45: React_Slice_Shallow{ball=1} -> Ply1_de_slice_shallow
			p46: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p49: React_Slice_Deep{ball=1} -> Ply1_de_slice_deep
	};

Ply1_de_slice_shallow_handler = pcase{
			p66: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p69: React_Slice_Shallow{ball=1} -> Ply1_de_slice_shallow
			p70: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p73: React_Slice_Deep{ball=1} -> Ply1_de_slice_deep
	};

Ply1_mid_regular_shallow_handler = pcase{
			p74: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p77: React_Slice_Shallow{ball=2} -> Ply1_mid_slice_shallow
			p78: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p81: React_Slice_Deep{ball=2} -> Ply1_mid_slice_deep
	};

Ply1_mid_slice_shallow_handler = pcase{
			p98: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p101: React_Slice_Shallow{ball=2} -> Ply1_mid_slice_shallow
			p102: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p105: React_Slice_Deep{ball=2} -> Ply1_mid_slice_deep
	};

Ply1_ad_regular_shallow_handler = pcase{
			p106: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p109: React_Slice_Shallow{ball=3} -> Ply1_ad_slice_shallow
			p110: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p113: React_Slice_Deep{ball=3} -> Ply1_ad_slice_deep
	};

Ply1_ad_slice_shallow_handler = pcase{
			p130: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p133: React_Slice_Shallow{ball=3} -> Ply1_ad_slice_shallow
			p134: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p137: React_Slice_Deep{ball=3} -> Ply1_ad_slice_deep
	};

// deep handlers
Ply1_de_regular_deep_handler = pcase{
			p138: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p141: React_Slice_Shallow{ball=1} -> Ply1_de_slice_shallow
			p142: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p145: React_Slice_Deep{ball=1} -> Ply1_de_slice_deep
	};

Ply1_de_slice_deep_handler = pcase{
			p162: React_Regular_Shallow{ball=1} -> Ply1_de_regular_shallow
			p165: React_Slice_Shallow{ball=1} -> Ply1_de_slice_shallow
			p166: React_Regular_Deep{ball=1} -> Ply1_de_regular_deep
			p169: React_Slice_Deep{ball=1} -> Ply1_de_slice_deep
	};

Ply1_mid_regular_deep_handler = pcase{
			p170: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p173: React_Slice_Shallow{ball=2} -> Ply1_mid_slice_shallow
			p174: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p177: React_Slice_Deep{ball=2} -> Ply1_mid_slice_deep
	};

Ply1_mid_slice_deep_handler = pcase{
			p194: React_Regular_Shallow{ball=2} -> Ply1_mid_regular_shallow
			p197: React_Slice_Shallow{ball=2} -> Ply1_mid_slice_shallow
			p198: React_Regular_Deep{ball=2} -> Ply1_mid_regular_deep
			p201: React_Slice_Deep{ball=2} -> Ply1_mid_slice_deep
	};

Ply1_ad_regular_deep_handler = pcase{
			p202: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p205: React_Slice_Shallow{ball=3} -> Ply1_ad_slice_shallow
			p206: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p209: React_Slice_Deep{ball=3} -> Ply1_ad_slice_deep
	};

Ply1_ad_slice_deep_handler = pcase{
			p226: React_Regular_Shallow{ball=3} -> Ply1_ad_regular_shallow
			p229: React_Slice_Shallow{ball=3} -> Ply1_ad_slice_shallow
			p230: React_Regular_Deep{ball=3} -> Ply1_ad_regular_deep
			p233: React_Slice_Deep{ball=3} -> Ply1_ad_slice_deep
	};

// shallow actions

// deuce stroke is when player1 hit position is 1
Ply1_de_regular_shallow = pcase{
			p234: FH_Crosscourt{ball=6} -> Ply2_de_regular_shallow_handler
			p235: FH_Downline{ball=4} -> Ply2_ad_regular_shallow_handler
			p236: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p237: BH_InsideIn{ball=4} -> Ply2_ad_regular_shallow_handler
			p238: BH_InsideOut{ball=6} -> Ply2_de_regular_shallow_handler
			p239: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p240: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p241: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_regular_shallow = pcase{
			p242: FH_InsideOut{ball=4} -> Ply2_ad_regular_shallow_handler
			p243: FH_Crosscourt{ball=6} -> Ply2_de_regular_shallow_handler
			p244: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p245: BH_InsideOut{ball=6} -> Ply2_de_regular_shallow_handler
			p246: BH_Crosscourt{ball=4} -> Ply2_ad_regular_shallow_handler
			p247: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p248: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p249: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_regular_shallow = pcase{
			p250: FH_InsideOut{ball=4} -> Ply2_ad_regular_shallow_handler
			p251: FH_InsideIn{ball=6} -> Ply2_de_regular_shallow_handler
			p252: FH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p253: BH_Crosscourt{ball=4} -> Ply2_ad_regular_shallow_handler
			p254: BH_Downline{ball=6} -> Ply2_de_regular_shallow_handler
			p255: BH_DownMid{ball=5} -> Ply2_mid_regular_shallow_handler
			p256: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p257: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};


// slices

// deuce stroke is when player1 hit position is 1
Ply1_de_slice_shallow = pcase{
			p306: FH_Crosscourt{ball=6} -> Ply2_de_slice_shallow_handler
			p307: FH_Downline{ball=4} -> Ply2_ad_slice_shallow_handler
			p308: FH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p309: BH_InsideIn{ball=4} -> Ply2_ad_slice_shallow_handler
			p310: BH_InsideOut{ball=6} -> Ply2_de_slice_shallow_handler
			p311: BH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p312: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p313: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_slice_shallow = pcase{
			p314: FH_InsideOut{ball=4} -> Ply2_ad_slice_shallow_handler
			p315: FH_Crosscourt{ball=6} -> Ply2_de_slice_shallow_handler
			p316: FH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p317: BH_InsideOut{ball=6} -> Ply2_de_slice_shallow_handler
			p318: BH_Crosscourt{ball=4} -> Ply2_ad_slice_shallow_handler
			p319: BH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p320: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p321: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_slice_shallow = pcase{
			p322: FH_InsideOut{ball=4} -> Ply2_ad_slice_shallow_handler
			p323: FH_InsideIn{ball=6} -> Ply2_de_slice_shallow_handler
			p324: FH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p325: BH_Crosscourt{ball=4} -> Ply2_ad_slice_shallow_handler
			p326: BH_Downline{ball=6} -> Ply2_de_slice_shallow_handler
			p327: BH_DownMid{ball=5} -> Ply2_mid_slice_shallow_handler
			p328: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p329: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// deep actions

// deuce stroke is when player1 hit position is 1
Ply1_de_regular_deep = pcase{
			p330: FH_Crosscourt{ball=6} -> Ply2_de_regular_deep_handler
			p331: FH_Downline{ball=4} -> Ply2_ad_regular_deep_handler
			p332: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p333: BH_InsideIn{ball=4} -> Ply2_ad_regular_deep_handler
			p334: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p335: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p336: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p337: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_regular_deep = pcase{
			p338: FH_InsideOut{ball=4} -> Ply2_ad_regular_deep_handler
			p339: FH_Crosscourt{ball=6} -> Ply2_de_regular_deep_handler
			p340: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p341: BH_InsideOut{ball=6} -> Ply2_de_regular_deep_handler
			p342: BH_Crosscourt{ball=4} -> Ply2_ad_regular_deep_handler
			p343: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p344: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p345: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_regular_deep = pcase{
			p346: FH_InsideOut{ball=4} -> Ply2_ad_regular_deep_handler
			p347: FH_InsideIn{ball=6} -> Ply2_de_regular_deep_handler
			p348: FH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p349: BH_Crosscourt{ball=4} -> Ply2_ad_regular_deep_handler
			p350: BH_Downline{ball=6} -> Ply2_de_regular_deep_handler
			p351: BH_DownMid{ball=5} -> Ply2_mid_regular_deep_handler
			p352: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p353: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

// slices

// deuce stroke is when player1 hit position is 1
Ply1_de_slice_deep = pcase{
			p402: FH_Crosscourt{ball=6} -> Ply2_de_slice_deep_handler
			p403: FH_Downline{ball=4} -> Ply2_ad_slice_deep_handler
			p404: FH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p405: BH_InsideIn{ball=4} -> Ply2_ad_slice_deep_handler
			p406: BH_InsideOut{ball=6} -> Ply2_de_slice_deep_handler
			p407: BH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p408: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p409: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_slice_deep = pcase{
			p410: FH_InsideOut{ball=4} -> Ply2_ad_slice_deep_handler
			p411: FH_Crosscourt{ball=6} -> Ply2_de_slice_deep_handler
			p412: FH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p413: BH_InsideOut{ball=6} -> Ply2_de_slice_deep_handler
			p414: BH_Crosscourt{ball=4} -> Ply2_ad_slice_deep_handler
			p415: BH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p416: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p417: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_slice_deep = pcase{
			p418: FH_InsideOut{ball=4} -> Ply2_ad_slice_deep_handler
			p419: FH_InsideIn{ball=6} -> Ply2_de_slice_deep_handler
			p420: FH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p421: BH_Crosscourt{ball=4} -> Ply2_ad_slice_deep_handler
			p422: BH_Downline{ball=6} -> Ply2_de_slice_deep_handler
			p423: BH_DownMid{ball=5} -> Ply2_mid_slice_deep_handler
			p424: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p425: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};

De_Ply2Serve = pcase {
			p426: ServeT_in{ball=2} -> Ply1_BackHandR
			p427: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p428: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p429: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p430: Serve_err{ball=9} -> De_Ply2Serve_2nd}; 

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			p431: ServeT_in{ball=2} -> Ply1_BackHandR
			p432: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p433: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p434: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p435: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ad_Ply2Serve = pcase {
			p436: ServeT_in{ball=2} -> Ply1_ForeHandR
			p437: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p438: ServeWide_in{ball=3} -> Ply1_BackHandR
			p439: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p440: Serve_err{ball=9} -> Ad_Ply2Serve_2nd}; 

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			p441: ServeT_in{ball=2} -> Ply1_ForeHandR
			p442: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p443: ServeWide_in{ball=3} -> Ply1_BackHandR
			p444: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p445: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			p446: FH_InsideOut{ball = 1} -> Ply1_de_regular_deep_handler
			p447: FH_InsideIn{ball = 3} -> Ply1_ad_regular_deep_handler
			p448: FH_CrossCourt{ball = 3} -> Ply1_ad_regular_deep_handler
			p449: FH_DownMid{ball = 2} -> Ply1_mid_regular_deep_handler
			p450: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p451: FH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
      			p452: FH_CrossCourt{ ball = 3} -> Ply1_ad_regular_deep_handler
			p453: FH_DownLine{ball = 1} -> Ply1_de_regular_deep_handler
			p454: FH_DownMid{ ball = 2} -> Ply1_mid_regular_deep_handler
			p455: FH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p456: FH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};
      		 
Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
			pcase {
			p457: BH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p458: BH_DownLine{ball = 3} -> Ply1_ad_regular_deep_handler
			p459: BH_DownMid{ball = 2} -> Ply1_mid_regular_deep_handler
			p460: BH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                      else { turn = (turn+1)%4} }-> NextPt
			p461: BH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p462: BH_CrossCourt{ball = 1} -> Ply1_de_regular_deep_handler
			p463: BH_InsideIn{ball = 1} -> Ply1_de_regular_deep_handler
			p464: BH_InsideOut{ball = 3} -> Ply1_ad_regular_deep_handler
			p465: BH_DownMid{ball = 2} -> Ply1_mid_regular_deep_handler
			p466: BH_Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p467: BH_Error{ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt			
      		 }};

// handlers
Ply2_de_regular_shallow_handler = pcase{
			p468: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p471: React_Slice_Shallow{ball=6} -> Ply2_de_slice_shallow
			p472: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p475: React_Slice_Deep{ball=6} -> Ply2_de_slice_deep
	};

Ply2_de_slice_shallow_handler = pcase{
			p492: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p495: React_Slice_Shallow{ball=6} -> Ply2_de_slice_shallow
			p496: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p499: React_Slice_Deep{ball=6} -> Ply2_de_slice_deep
	};

Ply2_mid_regular_shallow_handler = pcase{
			p500: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p503: React_Slice_Shallow{ball=5} -> Ply2_mid_slice_shallow
			p504: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p507: React_Slice_Deep{ball=5} -> Ply2_mid_slice_deep
	};

Ply2_mid_slice_shallow_handler = pcase{
			p524: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p527: React_Slice_Shallow{ball=5} -> Ply2_mid_slice_shallow
			p528: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p531: React_Slice_Deep{ball=5} -> Ply2_mid_slice_deep
	};

Ply2_ad_regular_shallow_handler = pcase{
			p532: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p535: React_Slice_Shallow{ball=4} -> Ply2_ad_slice_shallow
			p536: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p539: React_Slice_Deep{ball=4} -> Ply2_ad_slice_deep
	};

Ply2_ad_slice_shallow_handler = pcase{
			p556: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p559: React_Slice_Shallow{ball=4} -> Ply2_ad_slice_shallow
			p560: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p563: React_Slice_Deep{ball=4} -> Ply2_ad_slice_deep
	};

// deep handlers
Ply2_de_regular_deep_handler = pcase{
			p564: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p567: React_Slice_Shallow{ball=6} -> Ply2_de_slice_shallow
			p568: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p571: React_Slice_Deep{ball=6} -> Ply2_de_slice_deep
	};

Ply2_de_slice_deep_handler = pcase{
			p588: React_Regular_Shallow{ball=6} -> Ply2_de_regular_shallow
			p591: React_Slice_Shallow{ball=6} -> Ply2_de_slice_shallow
			p592: React_Regular_Deep{ball=6} -> Ply2_de_regular_deep
			p595: React_Slice_Deep{ball=6} -> Ply2_de_slice_deep
	};

Ply2_mid_regular_deep_handler = pcase{
			p596: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p599: React_Slice_Shallow{ball=5} -> Ply2_mid_slice_shallow
			p600: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p603: React_Slice_Deep{ball=5} -> Ply2_mid_slice_deep
	};

Ply2_mid_slice_deep_handler = pcase{
			p620: React_Regular_Shallow{ball=5} -> Ply2_mid_regular_shallow
			p623: React_Slice_Shallow{ball=5} -> Ply2_mid_slice_shallow
			p624: React_Regular_Deep{ball=5} -> Ply2_mid_regular_deep
			p627: React_Slice_Deep{ball=5} -> Ply2_mid_slice_deep
	};

Ply2_ad_regular_deep_handler = pcase{
			p628: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p631: React_Slice_Shallow{ball=4} -> Ply2_ad_slice_shallow
			p632: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p635: React_Slice_Deep{ball=4} -> Ply2_ad_slice_deep
	};

Ply2_ad_slice_deep_handler = pcase{
			p652: React_Regular_Shallow{ball=4} -> Ply2_ad_regular_shallow
			p655: React_Slice_Shallow{ball=4} -> Ply2_ad_slice_shallow
			p656: React_Regular_Deep{ball=4} -> Ply2_ad_regular_deep
			p659: React_Slice_Deep{ball=4} -> Ply2_ad_slice_deep
	};

// deuce stroke is when player2 hit position is 6
Ply2_de_regular_shallow = pcase { // if already 
			p660: FH_InsideOut {ball = 1} -> Ply1_de_regular_shallow_handler
			p661: FH_insideIn {ball = 3} -> Ply1_ad_regular_shallow_handler
			p662: FH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p663: BH_Crosscourt {ball = 1} -> Ply1_de_regular_shallow_handler
			p664: BH_Downline {ball = 3} -> Ply1_ad_regular_shallow_handler
			p665: BH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p666: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p667: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid stroke is when player2 hit position is 5
Ply2_mid_regular_shallow = noMove -> pcase{
			p668: FH_InsideOut {ball = 1} -> Ply1_de_regular_shallow_handler
			p669: FH_Crosscourt{ball = 3} -> Ply1_ad_regular_shallow_handler
			p670: FH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p671: BH_InsideOut {ball = 3} -> Ply1_ad_regular_shallow_handler
			p672: BH_Crosscourt {ball = 1} -> Ply1_de_regular_shallow_handler
			p673: BH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p674: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p675: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_regular_shallow = pcase{
			p676: FH_Crosscourt {ball = 3} -> Ply1_ad_regular_shallow_handler
			p677: FH_Downline {ball = 1} -> Ply1_de_regular_shallow_handler
			p678: FH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p679: BH_InsideIn {ball = 1} -> Ply1_de_regular_shallow_handler
			p680: BH_InsideOut {ball = 3} -> Ply1_ad_regular_shallow_handler
			p681: BH_DownMid {ball = 2} -> Ply1_mid_regular_shallow_handler
			p682: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p683: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// slices

// deuce stroke is when player2 hit position is 6
Ply2_de_slice_shallow = pcase { // if already 
			p732: FH_InsideOut {ball = 1} -> Ply1_de_slice_shallow_handler
			p733: FH_insideIn {ball = 3} -> Ply1_ad_slice_shallow_handler
			p734: FH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p735: BH_Crosscourt {ball = 1} -> Ply1_de_slice_shallow_handler
			p736: BH_Downline {ball = 3} -> Ply1_ad_slice_shallow_handler
			p737: BH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p738: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p739: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid stroke is when player2 hit position is 5
Ply2_mid_slice_shallow = noMove -> pcase{
			p740: FH_InsideOut {ball = 1} -> Ply1_de_slice_shallow_handler
			p741: FH_Crosscourt{ball = 3} -> Ply1_ad_slice_shallow_handler
			p742: FH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p743: BH_InsideOut {ball = 3} -> Ply1_ad_slice_shallow_handler
			p744: BH_Crosscourt {ball = 1} -> Ply1_de_slice_shallow_handler
			p745: BH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p746: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p747: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_slice_shallow = pcase{
			p748: FH_Crosscourt {ball = 3} -> Ply1_ad_slice_shallow_handler
			p749: FH_Downline {ball = 1} -> Ply1_de_slice_shallow_handler
			p750: FH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p751: BH_InsideIn {ball = 1} -> Ply1_de_slice_shallow_handler
			p752: BH_InsideOut {ball = 3} -> Ply1_ad_slice_shallow_handler
			p753: BH_DownMid {ball = 2} -> Ply1_mid_slice_shallow_handler
			p754: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p755: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	}; 

// deep actions

// deuce stroke is when player2 hit position is 6
Ply2_de_regular_deep = pcase { // if already 
	p756: FH_InsideOut {ball = 1} -> Ply1_de_regular_deep_handler
	p757: FH_insideIn {ball = 3} -> Ply1_ad_regular_deep_handler
	p758: FH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p759: BH_Crosscourt {ball = 1} -> Ply1_de_regular_deep_handler
	p760: BH_Downline {ball = 3} -> Ply1_ad_regular_deep_handler
	p761: BH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p762: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p763: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// mid stroke is when player2 hit position is 5
Ply2_mid_regular_deep = noMove -> pcase{
	p764: FH_InsideOut {ball = 1} -> Ply1_de_regular_deep_handler
	p765: FH_Crosscourt{ball = 3} -> Ply1_ad_regular_deep_handler
	p766: FH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p767: BH_InsideOut {ball = 3} -> Ply1_ad_regular_deep_handler
	p768: BH_Crosscourt {ball = 1} -> Ply1_de_regular_deep_handler
	p769: BH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p770: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p771: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// ad stroke is when player 2 hit position is 4
Ply2_ad_regular_deep = pcase{
	p772: FH_Crosscourt {ball = 3} -> Ply1_ad_regular_deep_handler
	p773: FH_Downline {ball = 1} -> Ply1_de_regular_deep_handler
	p774: FH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p775: BH_InsideIn {ball = 1} -> Ply1_de_regular_deep_handler
	p776: BH_InsideOut {ball = 3} -> Ply1_ad_regular_deep_handler
	p777: BH_DownMid {ball = 2} -> Ply1_mid_regular_deep_handler
	p778: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p779: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};    

// slices

// deuce stroke is when player2 hit position is 6
Ply2_de_slice_deep = pcase { // if already 
	p828: FH_InsideOut {ball = 1} -> Ply1_de_slice_deep_handler
	p829: FH_insideIn {ball = 3} -> Ply1_ad_slice_deep_handler
	p830: FH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p831: BH_Crosscourt {ball = 1} -> Ply1_de_slice_deep_handler
	p832: BH_Downline {ball = 3} -> Ply1_ad_slice_deep_handler
	p833: BH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p834: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p835: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// mid stroke is when player2 hit position is 5
Ply2_mid_slice_deep = noMove -> pcase{
	p836: FH_InsideOut {ball = 1} -> Ply1_de_slice_deep_handler
	p837: FH_Crosscourt{ball = 3} -> Ply1_ad_slice_deep_handler
	p838: FH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p839: BH_InsideOut {ball = 3} -> Ply1_ad_slice_deep_handler
	p840: BH_Crosscourt {ball = 1} -> Ply1_de_slice_deep_handler
	p841: BH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p842: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p843: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
};

// ad stroke is when player 2 hit position is 4
Ply2_ad_slice_deep = pcase{
	p844: FH_Crosscourt {ball = 3} -> Ply1_ad_slice_deep_handler
	p845: FH_Downline {ball = 1} -> Ply1_de_slice_deep_handler
	p846: FH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p847: BH_InsideIn {ball = 1} -> Ply1_de_slice_deep_handler
	p848: BH_InsideOut {ball = 3} -> Ply1_ad_slice_deep_handler
	p849: BH_DownMid {ball = 2} -> Ply1_mid_slice_deep_handler
	p850: Winner{ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
														   else { turn = (turn+1)%4} }-> NextPt
	p851: Error {ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
														   else { turn = (turn+1)%4} }-> NextPt 
}; 

#define player1Win won == player1;
#assert TieBreakGame reaches player1Win with prob;